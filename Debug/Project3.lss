
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014ce  00800200  00800200  00001bb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00001c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000346c  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b88  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bec  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b0  00000000  00000000  00007b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e6f  00000000  00000000  00008400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021eb  00000000  00000000  0000926f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  0000b45a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__vector_25>
      68:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_26>
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__vector_36>
      94:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_37>
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 05       	cpc	r16, r5
      e6:	eb 04       	cpc	r14, r11
      e8:	05 05       	cpc	r16, r5
      ea:	14 05       	cpc	r17, r4
      ec:	b9 05       	cpc	r27, r9
      ee:	23 05       	cpc	r18, r3
      f0:	dc 04       	cpc	r13, r12
      f2:	0c 06       	cpc	r0, r28
      f4:	41 06       	cpc	r4, r17
      f6:	e3 06       	cpc	r14, r19
      f8:	e5 06       	cpc	r14, r21
      fa:	1b 07       	cpc	r17, r27
      fc:	92 07       	cpc	r25, r18

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ee e3       	ldi	r30, 0x3E	; 62
     116:	fb e1       	ldi	r31, 0x1B	; 27
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 30       	cpi	r26, 0x00	; 0
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	26 e1       	ldi	r18, 0x16	; 22
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ae 3c       	cpi	r26, 0xCE	; 206
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 14 0a 	call	0x1428	; 0x1428 <main>
     13c:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 cc 16 	sts	0x16CC, r30
        sts  KernelSp+1, r31
     192:	f0 93 cd 16 	sts	0x16CD, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 aa 16 	lds	r30, 0x16AA
        lds  r31, CurrentSp+1
     19a:	f0 91 ab 16 	lds	r31, 0x16AB
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 aa 16 	sts	0x16AA, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 ab 16 	sts	0x16AB, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 cc 16 	lds	r30, 0x16CC
        lds  r31, KernelSp+1
     244:	f0 91 cd 16 	lds	r31, 0x16CD
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     296:	ea e0       	ldi	r30, 0x0A	; 10
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	80 81       	ld	r24, Z
     29c:	81 60       	ori	r24, 0x01	; 1
     29e:	80 83       	st	Z, r24
     2a0:	08 95       	ret

000002a2 <init_LED_PORTL_pin1>:
     2a2:	ea e0       	ldi	r30, 0x0A	; 10
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	80 81       	ld	r24, Z
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	80 83       	st	Z, r24
     2ac:	08 95       	ret

000002ae <init_LED_PORTL_pin2>:
     2ae:	ea e0       	ldi	r30, 0x0A	; 10
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
     2b2:	80 81       	ld	r24, Z
     2b4:	84 60       	ori	r24, 0x04	; 4
     2b6:	80 83       	st	Z, r24
     2b8:	08 95       	ret

000002ba <init_LED_PORTL_pin5>:
     2ba:	ea e0       	ldi	r30, 0x0A	; 10
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	80 81       	ld	r24, Z
     2c0:	80 62       	ori	r24, 0x20	; 32
     2c2:	80 83       	st	Z, r24
     2c4:	08 95       	ret

000002c6 <init_LED_PORTL_pin6>:
     2c6:	ea e0       	ldi	r30, 0x0A	; 10
     2c8:	f1 e0       	ldi	r31, 0x01	; 1
     2ca:	80 81       	ld	r24, Z
     2cc:	80 64       	ori	r24, 0x40	; 64
     2ce:	80 83       	st	Z, r24
     2d0:	08 95       	ret

000002d2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	90 81       	ld	r25, Z
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <enable_LED+0x10>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	8a 95       	dec	r24
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <enable_LED+0xc>
     2e6:	29 2b       	or	r18, r25
     2e8:	20 83       	st	Z, r18
     2ea:	08 95       	ret

000002ec <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     2ec:	eb e0       	ldi	r30, 0x0B	; 11
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	90 81       	ld	r25, Z
     2f2:	21 e0       	ldi	r18, 0x01	; 1
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <disable_LED+0x10>
     2f8:	22 0f       	add	r18, r18
     2fa:	33 1f       	adc	r19, r19
     2fc:	8a 95       	dec	r24
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <disable_LED+0xc>
     300:	20 95       	com	r18
     302:	29 23       	and	r18, r25
     304:	20 83       	st	Z, r18
     306:	08 95       	ret

00000308 <Init_Task>:

// An idle task that runs when there is nothing else to do
// Could be changed later to put CPU into low power state
void Idle() {
	for(;;) {
	}
     308:	21 9a       	sbi	0x04, 1	; 4
     30a:	29 9a       	sbi	0x05, 1	; 5
     30c:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <Roomba_Init>
     310:	08 95       	ret

00000312 <Init_Drive>:
     312:	22 9a       	sbi	0x04, 2	; 4
     314:	29 98       	cbi	0x05, 1	; 5
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e8       	ldi	r23, 0x80	; 128
     31a:	84 e6       	ldi	r24, 0x64	; 100
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <Roomba_Drive>
     322:	08 95       	ret

00000324 <a_main>:

// Application level main function
// Creates the required tasks and then terminates
void a_main() {

	portL2_Mutex = Mutex_Init();
     324:	00 d7       	rcall	.+3584   	; 0x1126 <Mutex_Init>
     326:	90 93 5f 16 	sts	0x165F, r25
     32a:	80 93 5e 16 	sts	0x165E, r24
	portL6_Mutex = Mutex_Init();
     32e:	fb d6       	rcall	.+3574   	; 0x1126 <Mutex_Init>
     330:	90 93 65 16 	sts	0x1665, r25
     334:	80 93 64 16 	sts	0x1664, r24

	e1 = Event_Init();
     338:	10 d7       	rcall	.+3616   	; 0x115a <Event_Init>
     33a:	90 93 69 16 	sts	0x1669, r25
     33e:	80 93 68 16 	sts	0x1668, r24
	e2 = Event_Init();
     342:	0b d7       	rcall	.+3606   	; 0x115a <Event_Init>
     344:	90 93 63 16 	sts	0x1663, r25
     348:	80 93 62 16 	sts	0x1662, r24

	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);

	InitPID = Task_Create(Init_Task,8,1);
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	68 e0       	ldi	r22, 0x08	; 8
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	84 e8       	ldi	r24, 0x84	; 132
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	1a d7       	rcall	.+3636   	; 0x118e <Task_Create>
     35a:	90 93 67 16 	sts	0x1667, r25
     35e:	80 93 66 16 	sts	0x1666, r24
	DrivePID = Task_Create(Init_Drive, 8, 1);
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	68 e0       	ldi	r22, 0x08	; 8
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	89 e8       	ldi	r24, 0x89	; 137
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	0f d7       	rcall	.+3614   	; 0x118e <Task_Create>
     370:	90 93 61 16 	sts	0x1661, r25
     374:	80 93 60 16 	sts	0x1660, r24
	Task_Terminate();
     378:	01 c0       	rjmp	.+2      	; 0x37c <Task_Terminate>
     37a:	08 95       	ret

0000037c <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     37c:	80 91 10 02 	lds	r24, 0x0210
     380:	90 91 11 02 	lds	r25, 0x0211
     384:	89 2b       	or	r24, r25
     386:	51 f0       	breq	.+20     	; 0x39c <Task_Terminate+0x20>
     388:	f8 94       	cli
     38a:	e0 91 12 02 	lds	r30, 0x0212
     38e:	f0 91 13 02 	lds	r31, 0x0213
     392:	e3 5f       	subi	r30, 0xF3	; 243
     394:	fe 4f       	sbci	r31, 0xFE	; 254
     396:	84 e0       	ldi	r24, 0x04	; 4
     398:	80 83       	st	Z, r24
     39a:	28 cf       	rjmp	.-432    	; 0x1ec <Enter_Kernel>
     39c:	08 95       	ret

0000039e <Kernel_Create_Task_At>:
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	1f 92       	push	r1
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	9a 83       	std	Y+2, r25	; 0x02
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	dc 01       	movw	r26, r24
     3b8:	7c 01       	movw	r14, r24
     3ba:	04 e0       	ldi	r16, 0x04	; 4
     3bc:	e0 0e       	add	r14, r16
     3be:	f1 1c       	adc	r15, r1
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	f7 01       	movw	r30, r14
     3c6:	8c 01       	movw	r16, r24
     3c8:	11 92       	st	Z+, r1
     3ca:	01 50       	subi	r16, 0x01	; 1
     3cc:	10 40       	sbci	r17, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <Kernel_Create_Task_At+0x2a>
     3d0:	fd 01       	movw	r30, r26
     3d2:	ed 5f       	subi	r30, 0xFD	; 253
     3d4:	fe 4f       	sbci	r31, 0xFE	; 254
     3d6:	8e eb       	ldi	r24, 0xBE	; 190
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	80 83       	st	Z, r24
     3dc:	31 97       	sbiw	r30, 0x01	; 1
     3de:	90 83       	st	Z, r25
     3e0:	31 97       	sbiw	r30, 0x01	; 1
     3e2:	60 83       	st	Z, r22
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	70 83       	st	Z, r23
     3e8:	31 97       	sbiw	r30, 0x01	; 1
     3ea:	10 82       	st	Z, r1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	92 93       	st	-Z, r25
     3f0:	9f 5f       	subi	r25, 0xFF	; 255
     3f2:	92 32       	cpi	r25, 0x22	; 34
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <Kernel_Create_Task_At+0x50>
     3f6:	a4 52       	subi	r26, 0x24	; 36
     3f8:	bf 4f       	sbci	r27, 0xFF	; 255
     3fa:	e9 81       	ldd	r30, Y+1	; 0x01
     3fc:	fa 81       	ldd	r31, Y+2	; 0x02
     3fe:	b3 83       	std	Z+3, r27	; 0x03
     400:	a2 83       	std	Z+2, r26	; 0x02
     402:	df 01       	movw	r26, r30
     404:	a5 5f       	subi	r26, 0xF5	; 245
     406:	be 4f       	sbci	r27, 0xFE	; 254
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	7c 93       	st	X, r23
     40c:	6e 93       	st	-X, r22
     40e:	12 96       	adiw	r26, 0x02	; 2
     410:	1c 92       	st	X, r1
     412:	80 91 0c 02 	lds	r24, 0x020C
     416:	90 91 0d 02 	lds	r25, 0x020D
     41a:	91 83       	std	Z+1, r25	; 0x01
     41c:	80 83       	st	Z, r24
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	fc 01       	movw	r30, r24
     424:	eb 5f       	subi	r30, 0xFB	; 251
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	51 83       	std	Z+1, r21	; 0x01
     42a:	40 83       	st	Z, r20
     42c:	32 96       	adiw	r30, 0x02	; 2
     42e:	51 83       	std	Z+1, r21	; 0x01
     430:	40 83       	st	Z, r20
     432:	32 96       	adiw	r30, 0x02	; 2
     434:	31 83       	std	Z+1, r19	; 0x01
     436:	20 83       	st	Z, r18
     438:	71 96       	adiw	r30, 0x11	; 17
     43a:	11 82       	std	Z+1, r1	; 0x01
     43c:	10 82       	st	Z, r1
     43e:	34 97       	sbiw	r30, 0x04	; 4
     440:	23 e6       	ldi	r18, 0x63	; 99
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	31 83       	std	Z+1, r19	; 0x01
     446:	20 83       	st	Z, r18
     448:	20 91 0e 02 	lds	r18, 0x020E
     44c:	30 91 0f 02 	lds	r19, 0x020F
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	30 93 0f 02 	sts	0x020F, r19
     458:	20 93 0e 02 	sts	0x020E, r18
     45c:	20 91 0c 02 	lds	r18, 0x020C
     460:	30 91 0d 02 	lds	r19, 0x020D
     464:	2f 5f       	subi	r18, 0xFF	; 255
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	30 93 0d 02 	sts	0x020D, r19
     46c:	20 93 0c 02 	sts	0x020C, r18
     470:	72 97       	sbiw	r30, 0x12	; 18
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 83       	st	Z, r24
     476:	44 e0       	ldi	r20, 0x04	; 4
     478:	52 e0       	ldi	r21, 0x02	; 2
     47a:	6a e8       	ldi	r22, 0x8A	; 138
     47c:	76 e1       	ldi	r23, 0x16	; 22
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	0e 94 c0 0a 	call	0x1580	; 0x1580 <enqueueRQ>
     486:	e9 81       	ldd	r30, Y+1	; 0x01
     488:	fa 81       	ldd	r31, Y+2	; 0x02
     48a:	80 81       	ld	r24, Z
     48c:	91 81       	ldd	r25, Z+1	; 0x01
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	08 95       	ret

000004a0 <Kernel_Create_Task>:
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
     4a6:	80 91 0e 02 	lds	r24, 0x020E
     4aa:	90 91 0f 02 	lds	r25, 0x020F
     4ae:	40 97       	sbiw	r24, 0x10	; 16
     4b0:	21 f1       	breq	.+72     	; 0x4fa <Kernel_Create_Task+0x5a>
     4b2:	80 91 78 03 	lds	r24, 0x0378
     4b6:	88 23       	and	r24, r24
     4b8:	71 f0       	breq	.+28     	; 0x4d6 <Kernel_Create_Task+0x36>
     4ba:	a6 e9       	ldi	r26, 0x96	; 150
     4bc:	b4 e0       	ldi	r27, 0x04	; 4
     4be:	e1 e0       	ldi	r30, 0x01	; 1
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	9c 91       	ld	r25, X
     4c4:	99 23       	and	r25, r25
     4c6:	49 f0       	breq	.+18     	; 0x4da <Kernel_Create_Task+0x3a>
     4c8:	31 96       	adiw	r30, 0x01	; 1
     4ca:	a2 5e       	subi	r26, 0xE2	; 226
     4cc:	be 4f       	sbci	r27, 0xFE	; 254
     4ce:	e0 31       	cpi	r30, 0x10	; 16
     4d0:	f1 05       	cpc	r31, r1
     4d2:	b9 f7       	brne	.-18     	; 0x4c2 <Kernel_Create_Task+0x22>
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <Kernel_Create_Task+0x3a>
     4d6:	e0 e0       	ldi	r30, 0x00	; 0
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	9a 01       	movw	r18, r20
     4dc:	ab 01       	movw	r20, r22
     4de:	be 01       	movw	r22, r28
     4e0:	ae e1       	ldi	r26, 0x1E	; 30
     4e2:	b1 e0       	ldi	r27, 0x01	; 1
     4e4:	ea 9f       	mul	r30, r26
     4e6:	c0 01       	movw	r24, r0
     4e8:	eb 9f       	mul	r30, r27
     4ea:	90 0d       	add	r25, r0
     4ec:	fa 9f       	mul	r31, r26
     4ee:	90 0d       	add	r25, r0
     4f0:	11 24       	eor	r1, r1
     4f2:	8c 58       	subi	r24, 0x8C	; 140
     4f4:	9d 4f       	sbci	r25, 0xFD	; 253
     4f6:	53 df       	rcall	.-346    	; 0x39e <Kernel_Create_Task_At>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <Kernel_Create_Task+0x5a>
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <Kernel_Init_Mutex_At>:
     500:	fc 01       	movw	r30, r24
     502:	80 91 0a 02 	lds	r24, 0x020A
     506:	90 91 0b 02 	lds	r25, 0x020B
     50a:	91 83       	std	Z+1, r25	; 0x01
     50c:	80 83       	st	Z, r24
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	82 83       	std	Z+2, r24	; 0x02
     512:	80 91 0a 02 	lds	r24, 0x020A
     516:	90 91 0b 02 	lds	r25, 0x020B
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	90 93 0b 02 	sts	0x020B, r25
     520:	80 93 0a 02 	sts	0x020A, r24
     524:	80 81       	ld	r24, Z
     526:	91 81       	ldd	r25, Z+1	; 0x01
     528:	08 95       	ret

0000052a <Kernel_Init_Event_At>:
     52a:	fc 01       	movw	r30, r24
     52c:	80 91 08 02 	lds	r24, 0x0208
     530:	90 91 09 02 	lds	r25, 0x0209
     534:	91 83       	std	Z+1, r25	; 0x01
     536:	80 83       	st	Z, r24
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	82 83       	std	Z+2, r24	; 0x02
     53c:	14 82       	std	Z+4, r1	; 0x04
     53e:	13 82       	std	Z+3, r1	; 0x03
     540:	80 91 08 02 	lds	r24, 0x0208
     544:	90 91 09 02 	lds	r25, 0x0209
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 09 02 	sts	0x0209, r25
     54e:	80 93 08 02 	sts	0x0208, r24
     552:	80 81       	ld	r24, Z
     554:	91 81       	ldd	r25, Z+1	; 0x01
     556:	08 95       	ret

00000558 <OS_Init>:
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	10 92 0f 02 	sts	0x020F, r1
     560:	10 92 0e 02 	sts	0x020E, r1
     564:	10 92 11 02 	sts	0x0211, r1
     568:	10 92 10 02 	sts	0x0210, r1
     56c:	10 92 0b 02 	sts	0x020B, r1
     570:	10 92 0a 02 	sts	0x020A, r1
     574:	10 92 09 02 	sts	0x0209, r1
     578:	10 92 08 02 	sts	0x0208, r1
     57c:	10 92 0d 02 	sts	0x020D, r1
     580:	10 92 0c 02 	sts	0x020C, r1
     584:	e4 e7       	ldi	r30, 0x74	; 116
     586:	f2 e0       	ldi	r31, 0x02	; 2
     588:	a8 e7       	ldi	r26, 0x78	; 120
     58a:	b3 e0       	ldi	r27, 0x03	; 3
     58c:	44 e5       	ldi	r20, 0x54	; 84
     58e:	54 e1       	ldi	r21, 0x14	; 20
     590:	2e e1       	ldi	r18, 0x1E	; 30
     592:	31 e0       	ldi	r19, 0x01	; 1
     594:	83 e6       	ldi	r24, 0x63	; 99
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	ef 01       	movw	r28, r30
     59a:	b9 01       	movw	r22, r18
     59c:	19 92       	st	Y+, r1
     59e:	61 50       	subi	r22, 0x01	; 1
     5a0:	70 40       	sbci	r23, 0x00	; 0
     5a2:	e1 f7       	brne	.-8      	; 0x59c <OS_Init+0x44>
     5a4:	1c 92       	st	X, r1
     5a6:	53 96       	adiw	r26, 0x13	; 19
     5a8:	9c 93       	st	X, r25
     5aa:	8e 93       	st	-X, r24
     5ac:	52 97       	sbiw	r26, 0x12	; 18
     5ae:	11 82       	std	Z+1, r1	; 0x01
     5b0:	10 82       	st	Z, r1
     5b2:	e2 5e       	subi	r30, 0xE2	; 226
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	a2 5e       	subi	r26, 0xE2	; 226
     5b8:	be 4f       	sbci	r27, 0xFE	; 254
     5ba:	e4 17       	cp	r30, r20
     5bc:	f5 07       	cpc	r31, r21
     5be:	61 f7       	brne	.-40     	; 0x598 <OS_Init+0x40>
     5c0:	ee e3       	ldi	r30, 0x3E	; 62
     5c2:	f2 e0       	ldi	r31, 0x02	; 2
     5c4:	26 e7       	ldi	r18, 0x76	; 118
     5c6:	32 e0       	ldi	r19, 0x02	; 2
     5c8:	87 e0       	ldi	r24, 0x07	; 7
     5ca:	df 01       	movw	r26, r30
     5cc:	12 97       	sbiw	r26, 0x02	; 2
     5ce:	ed 01       	movw	r28, r26
     5d0:	68 2f       	mov	r22, r24
     5d2:	19 92       	st	Y+, r1
     5d4:	6a 95       	dec	r22
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <OS_Init+0x7a>
     5d8:	10 82       	st	Z, r1
     5da:	37 96       	adiw	r30, 0x07	; 7
     5dc:	e2 17       	cp	r30, r18
     5de:	f3 07       	cpc	r31, r19
     5e0:	a1 f7       	brne	.-24     	; 0x5ca <OS_Init+0x72>
     5e2:	e6 e1       	ldi	r30, 0x16	; 22
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	2e e3       	ldi	r18, 0x3E	; 62
     5e8:	32 e0       	ldi	r19, 0x02	; 2
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	df 01       	movw	r26, r30
     5ee:	12 97       	sbiw	r26, 0x02	; 2
     5f0:	ed 01       	movw	r28, r26
     5f2:	68 2f       	mov	r22, r24
     5f4:	19 92       	st	Y+, r1
     5f6:	6a 95       	dec	r22
     5f8:	e9 f7       	brne	.-6      	; 0x5f4 <OS_Init+0x9c>
     5fa:	10 82       	st	Z, r1
     5fc:	35 96       	adiw	r30, 0x05	; 5
     5fe:	e2 17       	cp	r30, r18
     600:	f3 07       	cpc	r31, r19
     602:	a1 f7       	brne	.-24     	; 0x5ec <OS_Init+0x94>
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <OS_Abort>:
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_exit>

00000612 <Dispatch>:
     612:	64 e0       	ldi	r22, 0x04	; 4
     614:	72 e0       	ldi	r23, 0x02	; 2
     616:	8a e8       	ldi	r24, 0x8A	; 138
     618:	96 e1       	ldi	r25, 0x16	; 22
     61a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <dequeueRQ>
     61e:	fc 01       	movw	r30, r24
     620:	90 93 13 02 	sts	0x0213, r25
     624:	80 93 12 02 	sts	0x0212, r24
     628:	89 2b       	or	r24, r25
     62a:	09 f4       	brne	.+2      	; 0x62e <Dispatch+0x1c>
     62c:	ee df       	rcall	.-36     	; 0x60a <OS_Abort>
     62e:	82 81       	ldd	r24, Z+2	; 0x02
     630:	93 81       	ldd	r25, Z+3	; 0x03
     632:	90 93 ab 16 	sts	0x16AB, r25
     636:	80 93 aa 16 	sts	0x16AA, r24
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	df 01       	movw	r26, r30
     63e:	ac 5f       	subi	r26, 0xFC	; 252
     640:	be 4f       	sbci	r27, 0xFE	; 254
     642:	8c 93       	st	X, r24
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	02 97       	sbiw	r24, 0x02	; 2
     64a:	20 f4       	brcc	.+8      	; 0x654 <Dispatch+0x42>
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	40 ce       	rjmp	.-896    	; 0x2d2 <enable_LED>
     652:	08 95       	ret
     654:	80 81       	ld	r24, Z
     656:	91 81       	ldd	r25, Z+1	; 0x01
     658:	02 97       	sbiw	r24, 0x02	; 2
     65a:	21 f4       	brne	.+8      	; 0x664 <Dispatch+0x52>
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	38 ce       	rjmp	.-912    	; 0x2d2 <enable_LED>
     662:	08 95       	ret
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	03 97       	sbiw	r24, 0x03	; 3
     66a:	19 f4       	brne	.+6      	; 0x672 <Dispatch+0x60>
     66c:	86 e0       	ldi	r24, 0x06	; 6
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	30 ce       	rjmp	.-928    	; 0x2d2 <enable_LED>
     672:	08 95       	ret

00000674 <Kernel_Unlock_Mutex>:
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	1f 92       	push	r1
     67e:	1f 92       	push	r1
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	a0 91 12 02 	lds	r26, 0x0212
     688:	b0 91 13 02 	lds	r27, 0x0213
     68c:	fd 01       	movw	r30, r26
     68e:	ec 5e       	subi	r30, 0xEC	; 236
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	40 81       	ld	r20, Z
     694:	51 81       	ldd	r21, Z+1	; 0x01
     696:	ec e3       	ldi	r30, 0x3C	; 60
     698:	f2 e0       	ldi	r31, 0x02	; 2
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	91 81       	ldd	r25, Z+1	; 0x01
     6a2:	84 17       	cp	r24, r20
     6a4:	95 07       	cpc	r25, r21
     6a6:	39 f0       	breq	.+14     	; 0x6b6 <Kernel_Unlock_Mutex+0x42>
     6a8:	0f 5f       	subi	r16, 0xFF	; 255
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	37 96       	adiw	r30, 0x07	; 7
     6ae:	08 30       	cpi	r16, 0x08	; 8
     6b0:	11 05       	cpc	r17, r1
     6b2:	a9 f7       	brne	.-22     	; 0x69e <Kernel_Unlock_Mutex+0x2a>
     6b4:	f7 c0       	rjmp	.+494    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     6b6:	8d 91       	ld	r24, X+
     6b8:	9c 91       	ld	r25, X
     6ba:	11 97       	sbiw	r26, 0x01	; 1
     6bc:	27 e0       	ldi	r18, 0x07	; 7
     6be:	20 9f       	mul	r18, r16
     6c0:	f0 01       	movw	r30, r0
     6c2:	21 9f       	mul	r18, r17
     6c4:	f0 0d       	add	r31, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	e4 5c       	subi	r30, 0xC4	; 196
     6ca:	fd 4f       	sbci	r31, 0xFD	; 253
     6cc:	23 81       	ldd	r18, Z+3	; 0x03
     6ce:	34 81       	ldd	r19, Z+4	; 0x04
     6d0:	28 17       	cp	r18, r24
     6d2:	39 07       	cpc	r19, r25
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <Kernel_Unlock_Mutex+0x64>
     6d6:	e6 c0       	rjmp	.+460    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     6d8:	ac 5f       	subi	r26, 0xFC	; 252
     6da:	be 4f       	sbci	r27, 0xFE	; 254
     6dc:	8c 91       	ld	r24, X
     6de:	86 30       	cpi	r24, 0x06	; 6
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <Kernel_Unlock_Mutex+0x70>
     6e2:	4d c0       	rjmp	.+154    	; 0x77e <Kernel_Unlock_Mutex+0x10a>
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	72 e0       	ldi	r23, 0x02	; 2
     6e8:	8c ea       	ldi	r24, 0xAC	; 172
     6ea:	96 e1       	ldi	r25, 0x16	; 22
     6ec:	ac d7       	rcall	.+3928   	; 0x1646 <dequeueWQ>
     6ee:	9a 83       	std	Y+2, r25	; 0x02
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	79 f4       	brne	.+30     	; 0x714 <Kernel_Unlock_Mutex+0xa0>
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	80 9f       	mul	r24, r16
     6fa:	f0 01       	movw	r30, r0
     6fc:	81 9f       	mul	r24, r17
     6fe:	f0 0d       	add	r31, r0
     700:	11 24       	eor	r1, r1
     702:	e4 5c       	subi	r30, 0xC4	; 196
     704:	fd 4f       	sbci	r31, 0xFD	; 253
     706:	16 82       	std	Z+6, r1	; 0x06
     708:	15 82       	std	Z+5, r1	; 0x05
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	82 83       	std	Z+2, r24	; 0x02
     70e:	14 82       	std	Z+4, r1	; 0x04
     710:	13 82       	std	Z+3, r1	; 0x03
     712:	c8 c0       	rjmp	.+400    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     714:	27 e0       	ldi	r18, 0x07	; 7
     716:	20 9f       	mul	r18, r16
     718:	f0 01       	movw	r30, r0
     71a:	21 9f       	mul	r18, r17
     71c:	f0 0d       	add	r31, r0
     71e:	11 24       	eor	r1, r1
     720:	e4 5c       	subi	r30, 0xC4	; 196
     722:	fd 4f       	sbci	r31, 0xFD	; 253
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	36 83       	std	Z+6, r19	; 0x06
     72a:	25 83       	std	Z+5, r18	; 0x05
     72c:	dc 01       	movw	r26, r24
     72e:	2d 91       	ld	r18, X+
     730:	3c 91       	ld	r19, X
     732:	34 83       	std	Z+4, r19	; 0x04
     734:	23 83       	std	Z+3, r18	; 0x03
     736:	20 91 12 02 	lds	r18, 0x0212
     73a:	30 91 13 02 	lds	r19, 0x0213
     73e:	d9 01       	movw	r26, r18
     740:	a9 5f       	subi	r26, 0xF9	; 249
     742:	be 4f       	sbci	r27, 0xFE	; 254
     744:	4d 91       	ld	r20, X+
     746:	5c 91       	ld	r21, X
     748:	11 97       	sbiw	r26, 0x01	; 1
     74a:	fc 01       	movw	r30, r24
     74c:	e9 5f       	subi	r30, 0xF9	; 249
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	51 83       	std	Z+1, r21	; 0x01
     752:	40 83       	st	Z, r20
     754:	33 97       	sbiw	r30, 0x03	; 3
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 83       	st	Z, r24
     75a:	f9 01       	movw	r30, r18
     75c:	eb 5f       	subi	r30, 0xFB	; 251
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	40 81       	ld	r20, Z
     762:	51 81       	ldd	r21, Z+1	; 0x01
     764:	11 96       	adiw	r26, 0x01	; 1
     766:	5c 93       	st	X, r21
     768:	4e 93       	st	-X, r20
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	80 83       	st	Z, r24
     76e:	44 e0       	ldi	r20, 0x04	; 4
     770:	52 e0       	ldi	r21, 0x02	; 2
     772:	6a e8       	ldi	r22, 0x8A	; 138
     774:	76 e1       	ldi	r23, 0x16	; 22
     776:	ce 01       	movw	r24, r28
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	02 d7       	rcall	.+3588   	; 0x1580 <enqueueRQ>
     77c:	93 c0       	rjmp	.+294    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     77e:	87 e0       	ldi	r24, 0x07	; 7
     780:	80 9f       	mul	r24, r16
     782:	f0 01       	movw	r30, r0
     784:	81 9f       	mul	r24, r17
     786:	f0 0d       	add	r31, r0
     788:	11 24       	eor	r1, r1
     78a:	e4 5c       	subi	r30, 0xC4	; 196
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	85 81       	ldd	r24, Z+5	; 0x05
     790:	96 81       	ldd	r25, Z+6	; 0x06
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	91 05       	cpc	r25, r1
     796:	60 f0       	brcs	.+24     	; 0x7b0 <Kernel_Unlock_Mutex+0x13c>
     798:	27 e0       	ldi	r18, 0x07	; 7
     79a:	20 9f       	mul	r18, r16
     79c:	f0 01       	movw	r30, r0
     79e:	21 9f       	mul	r18, r17
     7a0:	f0 0d       	add	r31, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	e4 5c       	subi	r30, 0xC4	; 196
     7a6:	fd 4f       	sbci	r31, 0xFD	; 253
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	96 83       	std	Z+6, r25	; 0x06
     7ac:	85 83       	std	Z+5, r24	; 0x05
     7ae:	7a c0       	rjmp	.+244    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	72 e0       	ldi	r23, 0x02	; 2
     7b4:	8c ea       	ldi	r24, 0xAC	; 172
     7b6:	96 e1       	ldi	r25, 0x16	; 22
     7b8:	46 d7       	rcall	.+3724   	; 0x1646 <dequeueWQ>
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	a9 f5       	brne	.+106    	; 0x82c <Kernel_Unlock_Mutex+0x1b8>
     7c2:	87 e0       	ldi	r24, 0x07	; 7
     7c4:	80 9f       	mul	r24, r16
     7c6:	f0 01       	movw	r30, r0
     7c8:	81 9f       	mul	r24, r17
     7ca:	f0 0d       	add	r31, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	e4 5c       	subi	r30, 0xC4	; 196
     7d0:	fd 4f       	sbci	r31, 0xFD	; 253
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	16 82       	std	Z+6, r1	; 0x06
     7d8:	15 82       	std	Z+5, r1	; 0x05
     7da:	14 82       	std	Z+4, r1	; 0x04
     7dc:	13 82       	std	Z+3, r1	; 0x03
     7de:	e0 91 12 02 	lds	r30, 0x0212
     7e2:	f0 91 13 02 	lds	r31, 0x0213
     7e6:	df 01       	movw	r26, r30
     7e8:	ab 5f       	subi	r26, 0xFB	; 251
     7ea:	be 4f       	sbci	r27, 0xFE	; 254
     7ec:	8d 91       	ld	r24, X+
     7ee:	9c 91       	ld	r25, X
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	12 96       	adiw	r26, 0x02	; 2
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	9c 93       	st	X, r25
     7f8:	8e 93       	st	-X, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	02 97       	sbiw	r24, 0x02	; 2
     800:	20 f4       	brcc	.+8      	; 0x80a <Kernel_Unlock_Mutex+0x196>
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	65 dd       	rcall	.-1334   	; 0x2d2 <enable_LED>
     808:	4d c0       	rjmp	.+154    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	02 97       	sbiw	r24, 0x02	; 2
     810:	21 f4       	brne	.+8      	; 0x81a <Kernel_Unlock_Mutex+0x1a6>
     812:	85 e0       	ldi	r24, 0x05	; 5
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	5d dd       	rcall	.-1350   	; 0x2d2 <enable_LED>
     818:	45 c0       	rjmp	.+138    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	03 97       	sbiw	r24, 0x03	; 3
     820:	09 f0       	breq	.+2      	; 0x824 <Kernel_Unlock_Mutex+0x1b0>
     822:	40 c0       	rjmp	.+128    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     824:	86 e0       	ldi	r24, 0x06	; 6
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	54 dd       	rcall	.-1368   	; 0x2d2 <enable_LED>
     82a:	3c c0       	rjmp	.+120    	; 0x8a4 <Kernel_Unlock_Mutex+0x230>
     82c:	27 e0       	ldi	r18, 0x07	; 7
     82e:	20 9f       	mul	r18, r16
     830:	f0 01       	movw	r30, r0
     832:	21 9f       	mul	r18, r17
     834:	f0 0d       	add	r31, r0
     836:	11 24       	eor	r1, r1
     838:	e4 5c       	subi	r30, 0xC4	; 196
     83a:	fd 4f       	sbci	r31, 0xFD	; 253
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	36 83       	std	Z+6, r19	; 0x06
     842:	25 83       	std	Z+5, r18	; 0x05
     844:	dc 01       	movw	r26, r24
     846:	2d 91       	ld	r18, X+
     848:	3c 91       	ld	r19, X
     84a:	34 83       	std	Z+4, r19	; 0x04
     84c:	23 83       	std	Z+3, r18	; 0x03
     84e:	20 91 12 02 	lds	r18, 0x0212
     852:	30 91 13 02 	lds	r19, 0x0213
     856:	d9 01       	movw	r26, r18
     858:	a9 5f       	subi	r26, 0xF9	; 249
     85a:	be 4f       	sbci	r27, 0xFE	; 254
     85c:	4d 91       	ld	r20, X+
     85e:	5c 91       	ld	r21, X
     860:	11 97       	sbiw	r26, 0x01	; 1
     862:	fc 01       	movw	r30, r24
     864:	e9 5f       	subi	r30, 0xF9	; 249
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	51 83       	std	Z+1, r21	; 0x01
     86a:	40 83       	st	Z, r20
     86c:	33 97       	sbiw	r30, 0x03	; 3
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
     872:	f9 01       	movw	r30, r18
     874:	eb 5f       	subi	r30, 0xFB	; 251
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	40 81       	ld	r20, Z
     87a:	51 81       	ldd	r21, Z+1	; 0x01
     87c:	11 96       	adiw	r26, 0x01	; 1
     87e:	5c 93       	st	X, r21
     880:	4e 93       	st	-X, r20
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	80 83       	st	Z, r24
     886:	44 e0       	ldi	r20, 0x04	; 4
     888:	52 e0       	ldi	r21, 0x02	; 2
     88a:	6a e8       	ldi	r22, 0x8A	; 138
     88c:	76 e1       	ldi	r23, 0x16	; 22
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	76 d6       	rcall	.+3308   	; 0x1580 <enqueueRQ>
     894:	44 e0       	ldi	r20, 0x04	; 4
     896:	52 e0       	ldi	r21, 0x02	; 2
     898:	6a e8       	ldi	r22, 0x8A	; 138
     89a:	76 e1       	ldi	r23, 0x16	; 22
     89c:	82 e1       	ldi	r24, 0x12	; 18
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	6f d6       	rcall	.+3294   	; 0x1580 <enqueueRQ>
     8a2:	b7 de       	rcall	.-658    	; 0x612 <Dispatch>
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	08 95       	ret

000008b2 <OS_Start>:
     8b2:	2f 92       	push	r2
     8b4:	3f 92       	push	r3
     8b6:	4f 92       	push	r4
     8b8:	5f 92       	push	r5
     8ba:	6f 92       	push	r6
     8bc:	7f 92       	push	r7
     8be:	8f 92       	push	r8
     8c0:	9f 92       	push	r9
     8c2:	af 92       	push	r10
     8c4:	bf 92       	push	r11
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <OS_Start+0x26>
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	80 91 10 02 	lds	r24, 0x0210
     8e2:	90 91 11 02 	lds	r25, 0x0211
     8e6:	89 2b       	or	r24, r25
     8e8:	09 f0       	breq	.+2      	; 0x8ec <OS_Start+0x3a>
     8ea:	06 c4       	rjmp	.+2060   	; 0x10f8 <OS_Start+0x846>
     8ec:	80 91 0e 02 	lds	r24, 0x020E
     8f0:	90 91 0f 02 	lds	r25, 0x020F
     8f4:	89 2b       	or	r24, r25
     8f6:	09 f4       	brne	.+2      	; 0x8fa <OS_Start+0x48>
     8f8:	ff c3       	rjmp	.+2046   	; 0x10f8 <OS_Start+0x846>
     8fa:	f8 94       	cli
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	90 93 11 02 	sts	0x0211, r25
     904:	80 93 10 02 	sts	0x0210, r24
     908:	84 de       	rcall	.-760    	; 0x612 <Dispatch>
     90a:	0f 2e       	mov	r0, r31
     90c:	f4 e1       	ldi	r31, 0x14	; 20
     90e:	ef 2e       	mov	r14, r31
     910:	f2 e0       	ldi	r31, 0x02	; 2
     912:	ff 2e       	mov	r15, r31
     914:	f0 2d       	mov	r31, r0
     916:	0f 2e       	mov	r0, r31
     918:	fe e1       	ldi	r31, 0x1E	; 30
     91a:	af 2e       	mov	r10, r31
     91c:	bb 24       	eor	r11, r11
     91e:	b3 94       	inc	r11
     920:	f0 2d       	mov	r31, r0
     922:	0f 2e       	mov	r0, r31
     924:	f3 e6       	ldi	r31, 0x63	; 99
     926:	2f 2e       	mov	r2, r31
     928:	31 2c       	mov	r3, r1
     92a:	f0 2d       	mov	r31, r0
     92c:	88 24       	eor	r8, r8
     92e:	83 94       	inc	r8
     930:	91 2c       	mov	r9, r1
     932:	0f 2e       	mov	r0, r31
     934:	fc e3       	ldi	r31, 0x3C	; 60
     936:	cf 2e       	mov	r12, r31
     938:	f2 e0       	ldi	r31, 0x02	; 2
     93a:	df 2e       	mov	r13, r31
     93c:	f0 2d       	mov	r31, r0
     93e:	04 e7       	ldi	r16, 0x74	; 116
     940:	12 e0       	ldi	r17, 0x02	; 2
     942:	0f 2e       	mov	r0, r31
     944:	fa e0       	ldi	r31, 0x0A	; 10
     946:	6f 2e       	mov	r6, r31
     948:	71 2c       	mov	r7, r1
     94a:	f0 2d       	mov	r31, r0
     94c:	e0 91 12 02 	lds	r30, 0x0212
     950:	f0 91 13 02 	lds	r31, 0x0213
     954:	df 01       	movw	r26, r30
     956:	a3 5f       	subi	r26, 0xF3	; 243
     958:	be 4f       	sbci	r27, 0xFE	; 254
     95a:	1c 92       	st	X, r1
     95c:	82 81       	ldd	r24, Z+2	; 0x02
     95e:	93 81       	ldd	r25, Z+3	; 0x03
     960:	90 93 ab 16 	sts	0x16AB, r25
     964:	80 93 aa 16 	sts	0x16AA, r24
     968:	ec db       	rcall	.-2088   	; 0x142 <CSwitch>
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	be dc       	rcall	.-1668   	; 0x2ec <disable_LED>
     970:	85 e0       	ldi	r24, 0x05	; 5
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	bb dc       	rcall	.-1674   	; 0x2ec <disable_LED>
     976:	86 e0       	ldi	r24, 0x06	; 6
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	b8 dc       	rcall	.-1680   	; 0x2ec <disable_LED>
     97c:	80 91 12 02 	lds	r24, 0x0212
     980:	90 91 13 02 	lds	r25, 0x0213
     984:	9c 83       	std	Y+4, r25	; 0x04
     986:	8b 83       	std	Y+3, r24	; 0x03
     988:	80 91 aa 16 	lds	r24, 0x16AA
     98c:	90 91 ab 16 	lds	r25, 0x16AB
     990:	ab 81       	ldd	r26, Y+3	; 0x03
     992:	bc 81       	ldd	r27, Y+4	; 0x04
     994:	13 96       	adiw	r26, 0x03	; 3
     996:	9c 93       	st	X, r25
     998:	8e 93       	st	-X, r24
     99a:	12 97       	sbiw	r26, 0x02	; 2
     99c:	fd 01       	movw	r30, r26
     99e:	e3 5f       	subi	r30, 0xF3	; 243
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	e0 81       	ld	r30, Z
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	ed 30       	cpi	r30, 0x0D	; 13
     9a8:	f1 05       	cpc	r31, r1
     9aa:	80 f6       	brcc	.-96     	; 0x94c <OS_Start+0x9a>
     9ac:	88 27       	eor	r24, r24
     9ae:	ee 58       	subi	r30, 0x8E	; 142
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	8f 4f       	sbci	r24, 0xFF	; 255
     9b4:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__tablejump2__>
     9b8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ba:	fc 81       	ldd	r31, Y+4	; 0x04
     9bc:	e4 5e       	subi	r30, 0xE4	; 228
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	e4 e7       	ldi	r30, 0x74	; 116
     9c6:	f2 e0       	ldi	r31, 0x02	; 2
     9c8:	20 81       	ld	r18, Z
     9ca:	31 81       	ldd	r19, Z+1	; 0x01
     9cc:	28 17       	cp	r18, r24
     9ce:	39 07       	cpc	r19, r25
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <OS_Start+0x122>
     9d2:	89 c0       	rjmp	.+274    	; 0xae6 <OS_Start+0x234>
     9d4:	0d c3       	rjmp	.+1562   	; 0xff0 <OS_Start+0x73e>
     9d6:	eb 81       	ldd	r30, Y+3	; 0x03
     9d8:	fc 81       	ldd	r31, Y+4	; 0x04
     9da:	e7 5f       	subi	r30, 0xF7	; 247
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	40 81       	ld	r20, Z
     9e0:	51 81       	ldd	r21, Z+1	; 0x01
     9e2:	eb 81       	ldd	r30, Y+3	; 0x03
     9e4:	fc 81       	ldd	r31, Y+4	; 0x04
     9e6:	eb 5f       	subi	r30, 0xFB	; 251
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	60 81       	ld	r22, Z
     9ec:	71 81       	ldd	r23, Z+1	; 0x01
     9ee:	eb 81       	ldd	r30, Y+3	; 0x03
     9f0:	fc 81       	ldd	r31, Y+4	; 0x04
     9f2:	e5 5f       	subi	r30, 0xF5	; 245
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	80 81       	ld	r24, Z
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	52 dd       	rcall	.-1372   	; 0x4a0 <Kernel_Create_Task>
     9fc:	eb 81       	ldd	r30, Y+3	; 0x03
     9fe:	fc 81       	ldd	r31, Y+4	; 0x04
     a00:	e2 5f       	subi	r30, 0xF2	; 242
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
     a08:	a1 cf       	rjmp	.-190    	; 0x94c <OS_Start+0x9a>
     a0a:	eb 81       	ldd	r30, Y+3	; 0x03
     a0c:	fc 81       	ldd	r31, Y+4	; 0x04
     a0e:	ec 5f       	subi	r30, 0xFC	; 252
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 83       	st	Z, r24
     a16:	44 e0       	ldi	r20, 0x04	; 4
     a18:	52 e0       	ldi	r21, 0x02	; 2
     a1a:	6a e8       	ldi	r22, 0x8A	; 138
     a1c:	76 e1       	ldi	r23, 0x16	; 22
     a1e:	82 e1       	ldi	r24, 0x12	; 18
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	ae d5       	rcall	.+2908   	; 0x1580 <enqueueRQ>
     a24:	f6 dd       	rcall	.-1044   	; 0x612 <Dispatch>
     a26:	92 cf       	rjmp	.-220    	; 0x94c <OS_Start+0x9a>
     a28:	eb 81       	ldd	r30, Y+3	; 0x03
     a2a:	fc 81       	ldd	r31, Y+4	; 0x04
     a2c:	ec 5f       	subi	r30, 0xFC	; 252
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	80 83       	st	Z, r24
     a34:	42 e0       	ldi	r20, 0x02	; 2
     a36:	52 e0       	ldi	r21, 0x02	; 2
     a38:	6a e6       	ldi	r22, 0x6A	; 106
     a3a:	76 e1       	ldi	r23, 0x16	; 22
     a3c:	82 e1       	ldi	r24, 0x12	; 18
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	2e d5       	rcall	.+2652   	; 0x149e <enqueueSQ>
     a42:	e7 dd       	rcall	.-1074   	; 0x612 <Dispatch>
     a44:	83 cf       	rjmp	.-250    	; 0x94c <OS_Start+0x9a>
     a46:	ab 81       	ldd	r26, Y+3	; 0x03
     a48:	bc 81       	ldd	r27, Y+4	; 0x04
     a4a:	2d 91       	ld	r18, X+
     a4c:	3c 91       	ld	r19, X
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	fd 01       	movw	r30, r26
     a52:	e4 5e       	subi	r30, 0xE4	; 228
     a54:	fe 4f       	sbci	r31, 0xFE	; 254
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	28 17       	cp	r18, r24
     a5c:	39 07       	cpc	r19, r25
     a5e:	51 f0       	breq	.+20     	; 0xa74 <OS_Start+0x1c2>
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	e4 e7       	ldi	r30, 0x74	; 116
     a66:	f2 e0       	ldi	r31, 0x02	; 2
     a68:	20 81       	ld	r18, Z
     a6a:	31 81       	ldd	r19, Z+1	; 0x01
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	41 f4       	brne	.+16     	; 0xa82 <OS_Start+0x1d0>
     a72:	ad c2       	rjmp	.+1370   	; 0xfce <OS_Start+0x71c>
     a74:	eb 81       	ldd	r30, Y+3	; 0x03
     a76:	fc 81       	ldd	r31, Y+4	; 0x04
     a78:	e6 5e       	subi	r30, 0xE6	; 230
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	91 82       	std	Z+1, r9	; 0x01
     a7e:	80 82       	st	Z, r8
     a80:	1a c0       	rjmp	.+52     	; 0xab6 <OS_Start+0x204>
     a82:	e2 e9       	ldi	r30, 0x92	; 146
     a84:	f3 e0       	ldi	r31, 0x03	; 3
     a86:	c4 01       	movw	r24, r8
     a88:	ab 81       	ldd	r26, Y+3	; 0x03
     a8a:	bc 81       	ldd	r27, Y+4	; 0x04
     a8c:	a4 5e       	subi	r26, 0xE4	; 228
     a8e:	be 4f       	sbci	r27, 0xFE	; 254
     a90:	6b 81       	ldd	r22, Y+3	; 0x03
     a92:	7c 81       	ldd	r23, Y+4	; 0x04
     a94:	2d 91       	ld	r18, X+
     a96:	3c 91       	ld	r19, X
     a98:	11 97       	sbiw	r26, 0x01	; 1
     a9a:	40 81       	ld	r20, Z
     a9c:	51 81       	ldd	r21, Z+1	; 0x01
     a9e:	42 17       	cp	r20, r18
     aa0:	53 07       	cpc	r21, r19
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <OS_Start+0x1f4>
     aa4:	97 c2       	rjmp	.+1326   	; 0xfd4 <OS_Start+0x722>
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	e2 5e       	subi	r30, 0xE2	; 226
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	80 31       	cpi	r24, 0x10	; 16
     aae:	91 05       	cpc	r25, r1
     ab0:	89 f7       	brne	.-30     	; 0xa94 <OS_Start+0x1e2>
     ab2:	7c 83       	std	Y+4, r23	; 0x04
     ab4:	6b 83       	std	Y+3, r22	; 0x03
     ab6:	eb 81       	ldd	r30, Y+3	; 0x03
     ab8:	fc 81       	ldd	r31, Y+4	; 0x04
     aba:	e6 5e       	subi	r30, 0xE6	; 230
     abc:	fe 4f       	sbci	r31, 0xFE	; 254
     abe:	80 81       	ld	r24, Z
     ac0:	91 81       	ldd	r25, Z+1	; 0x01
     ac2:	89 2b       	or	r24, r25
     ac4:	09 f4       	brne	.+2      	; 0xac8 <OS_Start+0x216>
     ac6:	42 cf       	rjmp	.-380    	; 0x94c <OS_Start+0x9a>
     ac8:	eb 81       	ldd	r30, Y+3	; 0x03
     aca:	fc 81       	ldd	r31, Y+4	; 0x04
     acc:	ec 5f       	subi	r30, 0xFC	; 252
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
     ad4:	44 e0       	ldi	r20, 0x04	; 4
     ad6:	52 e0       	ldi	r21, 0x02	; 2
     ad8:	6a e8       	ldi	r22, 0x8A	; 138
     ada:	76 e1       	ldi	r23, 0x16	; 22
     adc:	82 e1       	ldi	r24, 0x12	; 18
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	4f d5       	rcall	.+2718   	; 0x1580 <enqueueRQ>
     ae2:	97 dd       	rcall	.-1234   	; 0x612 <Dispatch>
     ae4:	33 cf       	rjmp	.-410    	; 0x94c <OS_Start+0x9a>
     ae6:	e2 e9       	ldi	r30, 0x92	; 146
     ae8:	f3 e0       	ldi	r31, 0x03	; 3
     aea:	c4 01       	movw	r24, r8
     aec:	ab 81       	ldd	r26, Y+3	; 0x03
     aee:	bc 81       	ldd	r27, Y+4	; 0x04
     af0:	a4 5e       	subi	r26, 0xE4	; 228
     af2:	be 4f       	sbci	r27, 0xFE	; 254
     af4:	6b 81       	ldd	r22, Y+3	; 0x03
     af6:	7c 81       	ldd	r23, Y+4	; 0x04
     af8:	2d 91       	ld	r18, X+
     afa:	3c 91       	ld	r19, X
     afc:	11 97       	sbiw	r26, 0x01	; 1
     afe:	40 81       	ld	r20, Z
     b00:	51 81       	ldd	r21, Z+1	; 0x01
     b02:	42 17       	cp	r20, r18
     b04:	53 07       	cpc	r21, r19
     b06:	09 f4       	brne	.+2      	; 0xb0a <OS_Start+0x258>
     b08:	76 c2       	rjmp	.+1260   	; 0xff6 <OS_Start+0x744>
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	e2 5e       	subi	r30, 0xE2	; 226
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	80 31       	cpi	r24, 0x10	; 16
     b12:	91 05       	cpc	r25, r1
     b14:	89 f7       	brne	.-30     	; 0xaf8 <OS_Start+0x246>
     b16:	1a cf       	rjmp	.-460    	; 0x94c <OS_Start+0x9a>
     b18:	8a 9d       	mul	r24, r10
     b1a:	90 01       	movw	r18, r0
     b1c:	8b 9d       	mul	r24, r11
     b1e:	30 0d       	add	r19, r0
     b20:	9a 9d       	mul	r25, r10
     b22:	30 0d       	add	r19, r0
     b24:	11 24       	eor	r1, r1
     b26:	c9 01       	movw	r24, r18
     b28:	8c 58       	subi	r24, 0x8C	; 140
     b2a:	9d 4f       	sbci	r25, 0xFD	; 253
     b2c:	fc 01       	movw	r30, r24
     b2e:	e6 5e       	subi	r30, 0xE6	; 230
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	11 82       	std	Z+1, r1	; 0x01
     b34:	10 82       	st	Z, r1
     b36:	eb 81       	ldd	r30, Y+3	; 0x03
     b38:	fc 81       	ldd	r31, Y+4	; 0x04
     b3a:	e9 5f       	subi	r30, 0xF9	; 249
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	20 81       	ld	r18, Z
     b40:	31 81       	ldd	r19, Z+1	; 0x01
     b42:	fc 01       	movw	r30, r24
     b44:	e9 5f       	subi	r30, 0xF9	; 249
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	80 81       	ld	r24, Z
     b4a:	91 81       	ldd	r25, Z+1	; 0x01
     b4c:	82 17       	cp	r24, r18
     b4e:	93 07       	cpc	r25, r19
     b50:	08 f0       	brcs	.+2      	; 0xb54 <OS_Start+0x2a2>
     b52:	fc ce       	rjmp	.-520    	; 0x94c <OS_Start+0x9a>
     b54:	eb 81       	ldd	r30, Y+3	; 0x03
     b56:	fc 81       	ldd	r31, Y+4	; 0x04
     b58:	ec 5f       	subi	r30, 0xFC	; 252
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 83       	st	Z, r24
     b60:	44 e0       	ldi	r20, 0x04	; 4
     b62:	52 e0       	ldi	r21, 0x02	; 2
     b64:	6a e8       	ldi	r22, 0x8A	; 138
     b66:	76 e1       	ldi	r23, 0x16	; 22
     b68:	82 e1       	ldi	r24, 0x12	; 18
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	09 d5       	rcall	.+2578   	; 0x1580 <enqueueRQ>
     b6e:	51 dd       	rcall	.-1374   	; 0x612 <Dispatch>
     b70:	ed ce       	rjmp	.-550    	; 0x94c <OS_Start+0x9a>
     b72:	eb 81       	ldd	r30, Y+3	; 0x03
     b74:	fc 81       	ldd	r31, Y+4	; 0x04
     b76:	e9 5f       	subi	r30, 0xF9	; 249
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	11 82       	std	Z+1, r1	; 0x01
     b7c:	10 82       	st	Z, r1
     b7e:	eb 81       	ldd	r30, Y+3	; 0x03
     b80:	fc 81       	ldd	r31, Y+4	; 0x04
     b82:	eb 5f       	subi	r30, 0xFB	; 251
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	11 82       	std	Z+1, r1	; 0x01
     b88:	10 82       	st	Z, r1
     b8a:	eb 81       	ldd	r30, Y+3	; 0x03
     b8c:	fc 81       	ldd	r31, Y+4	; 0x04
     b8e:	ec 5f       	subi	r30, 0xFC	; 252
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	86 e0       	ldi	r24, 0x06	; 6
     b94:	80 83       	st	Z, r24
     b96:	dc 82       	std	Y+4, r13	; 0x04
     b98:	cb 82       	std	Y+3, r12	; 0x03
     b9a:	e0 91 12 02 	lds	r30, 0x0212
     b9e:	f0 91 13 02 	lds	r31, 0x0213
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	ab 81       	ldd	r26, Y+3	; 0x03
     ba8:	bc 81       	ldd	r27, Y+4	; 0x04
     baa:	13 96       	adiw	r26, 0x03	; 3
     bac:	2d 91       	ld	r18, X+
     bae:	3c 91       	ld	r19, X
     bb0:	14 97       	sbiw	r26, 0x04	; 4
     bb2:	28 17       	cp	r18, r24
     bb4:	39 07       	cpc	r19, r25
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <OS_Start+0x314>
     bb8:	8d 91       	ld	r24, X+
     bba:	9c 91       	ld	r25, X
     bbc:	ec 5e       	subi	r30, 0xEC	; 236
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	91 83       	std	Z+1, r25	; 0x01
     bc2:	80 83       	st	Z, r24
     bc4:	57 dd       	rcall	.-1362   	; 0x674 <Kernel_Unlock_Mutex>
     bc6:	eb 81       	ldd	r30, Y+3	; 0x03
     bc8:	fc 81       	ldd	r31, Y+4	; 0x04
     bca:	37 96       	adiw	r30, 0x07	; 7
     bcc:	fc 83       	std	Y+4, r31	; 0x04
     bce:	eb 83       	std	Y+3, r30	; 0x03
     bd0:	e0 17       	cp	r30, r16
     bd2:	f1 07       	cpc	r31, r17
     bd4:	11 f7       	brne	.-60     	; 0xb9a <OS_Start+0x2e8>
     bd6:	e0 91 12 02 	lds	r30, 0x0212
     bda:	f0 91 13 02 	lds	r31, 0x0213
     bde:	df 01       	movw	r26, r30
     be0:	ac 5f       	subi	r26, 0xFC	; 252
     be2:	be 4f       	sbci	r27, 0xFE	; 254
     be4:	1c 92       	st	X, r1
     be6:	52 96       	adiw	r26, 0x12	; 18
     be8:	11 96       	adiw	r26, 0x01	; 1
     bea:	3c 92       	st	X, r3
     bec:	2e 92       	st	-X, r2
     bee:	1f 97       	sbiw	r26, 0x0f	; 15
     bf0:	11 96       	adiw	r26, 0x01	; 1
     bf2:	7c 92       	st	X, r7
     bf4:	6e 92       	st	-X, r6
     bf6:	12 97       	sbiw	r26, 0x02	; 2
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	7c 92       	st	X, r7
     bfc:	6e 92       	st	-X, r6
     bfe:	11 82       	std	Z+1, r1	; 0x01
     c00:	10 82       	st	Z, r1
     c02:	80 91 0e 02 	lds	r24, 0x020E
     c06:	90 91 0f 02 	lds	r25, 0x020F
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	90 93 0f 02 	sts	0x020F, r25
     c10:	80 93 0e 02 	sts	0x020E, r24
     c14:	fe dc       	rcall	.-1540   	; 0x612 <Dispatch>
     c16:	9a ce       	rjmp	.-716    	; 0x94c <OS_Start+0x9a>
     c18:	80 91 0a 02 	lds	r24, 0x020A
     c1c:	90 91 0b 02 	lds	r25, 0x020B
     c20:	08 97       	sbiw	r24, 0x08	; 8
     c22:	41 f1       	breq	.+80     	; 0xc74 <OS_Start+0x3c2>
     c24:	d6 01       	movw	r26, r12
     c26:	12 96       	adiw	r26, 0x02	; 2
     c28:	8c 91       	ld	r24, X
     c2a:	88 23       	and	r24, r24
     c2c:	89 f0       	breq	.+34     	; 0xc50 <OS_Start+0x39e>
     c2e:	e5 e4       	ldi	r30, 0x45	; 69
     c30:	f2 e0       	ldi	r31, 0x02	; 2
     c32:	94 01       	movw	r18, r8
     c34:	4b 81       	ldd	r20, Y+3	; 0x03
     c36:	5c 81       	ldd	r21, Y+4	; 0x04
     c38:	80 81       	ld	r24, Z
     c3a:	88 23       	and	r24, r24
     c3c:	61 f0       	breq	.+24     	; 0xc56 <OS_Start+0x3a4>
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	37 96       	adiw	r30, 0x07	; 7
     c44:	28 30       	cpi	r18, 0x08	; 8
     c46:	31 05       	cpc	r19, r1
     c48:	b9 f7       	brne	.-18     	; 0xc38 <OS_Start+0x386>
     c4a:	5c 83       	std	Y+4, r21	; 0x04
     c4c:	4b 83       	std	Y+3, r20	; 0x03
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <OS_Start+0x3a8>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <OS_Start+0x3a8>
     c56:	5c 83       	std	Y+4, r21	; 0x04
     c58:	4b 83       	std	Y+3, r20	; 0x03
     c5a:	c9 01       	movw	r24, r18
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	82 1b       	sub	r24, r18
     c6a:	93 0b       	sbc	r25, r19
     c6c:	84 5c       	subi	r24, 0xC4	; 196
     c6e:	9d 4f       	sbci	r25, 0xFD	; 253
     c70:	47 dc       	rcall	.-1906   	; 0x500 <Kernel_Init_Mutex_At>
     c72:	2c 01       	movw	r4, r24
     c74:	eb 81       	ldd	r30, Y+3	; 0x03
     c76:	fc 81       	ldd	r31, Y+4	; 0x04
     c78:	e2 5f       	subi	r30, 0xF2	; 242
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	51 82       	std	Z+1, r5	; 0x01
     c7e:	40 82       	st	Z, r4
     c80:	65 ce       	rjmp	.-822    	; 0x94c <OS_Start+0x9a>
     c82:	eb 81       	ldd	r30, Y+3	; 0x03
     c84:	fc 81       	ldd	r31, Y+4	; 0x04
     c86:	ec 5e       	subi	r30, 0xEC	; 236
     c88:	fe 4f       	sbci	r31, 0xFE	; 254
     c8a:	40 81       	ld	r20, Z
     c8c:	51 81       	ldd	r21, Z+1	; 0x01
     c8e:	f6 01       	movw	r30, r12
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	48 17       	cp	r20, r24
     c96:	59 07       	cpc	r21, r25
     c98:	09 f4       	brne	.+2      	; 0xc9c <OS_Start+0x3ea>
     c9a:	bf c1       	rjmp	.+894    	; 0x101a <OS_Start+0x768>
     c9c:	c4 01       	movw	r24, r8
     c9e:	6b 81       	ldd	r22, Y+3	; 0x03
     ca0:	7c 81       	ldd	r23, Y+4	; 0x04
     ca2:	27 81       	ldd	r18, Z+7	; 0x07
     ca4:	30 85       	ldd	r19, Z+8	; 0x08
     ca6:	42 17       	cp	r20, r18
     ca8:	53 07       	cpc	r21, r19
     caa:	09 f4       	brne	.+2      	; 0xcae <OS_Start+0x3fc>
     cac:	b9 c1       	rjmp	.+882    	; 0x1020 <OS_Start+0x76e>
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	37 96       	adiw	r30, 0x07	; 7
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	91 05       	cpc	r25, r1
     cb6:	a9 f7       	brne	.-22     	; 0xca2 <OS_Start+0x3f0>
     cb8:	49 ce       	rjmp	.-878    	; 0x94c <OS_Start+0x9a>
     cba:	fc 01       	movw	r30, r24
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	e8 1b       	sub	r30, r24
     cca:	f9 0b       	sbc	r31, r25
     ccc:	e4 5c       	subi	r30, 0xC4	; 196
     cce:	fd 4f       	sbci	r31, 0xFD	; 253
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	82 83       	std	Z+2, r24	; 0x02
     cd4:	ab 81       	ldd	r26, Y+3	; 0x03
     cd6:	bc 81       	ldd	r27, Y+4	; 0x04
     cd8:	8d 91       	ld	r24, X+
     cda:	9c 91       	ld	r25, X
     cdc:	94 83       	std	Z+4, r25	; 0x04
     cde:	83 83       	std	Z+3, r24	; 0x03
     ce0:	85 81       	ldd	r24, Z+5	; 0x05
     ce2:	96 81       	ldd	r25, Z+6	; 0x06
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	96 83       	std	Z+6, r25	; 0x06
     ce8:	85 83       	std	Z+5, r24	; 0x05
     cea:	30 ce       	rjmp	.-928    	; 0x94c <OS_Start+0x9a>
     cec:	fc 01       	movw	r30, r24
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	e8 1b       	sub	r30, r24
     cfc:	f9 0b       	sbc	r31, r25
     cfe:	e4 5c       	subi	r30, 0xC4	; 196
     d00:	fd 4f       	sbci	r31, 0xFD	; 253
     d02:	23 81       	ldd	r18, Z+3	; 0x03
     d04:	34 81       	ldd	r19, Z+4	; 0x04
     d06:	eb 81       	ldd	r30, Y+3	; 0x03
     d08:	fc 81       	ldd	r31, Y+4	; 0x04
     d0a:	40 81       	ld	r20, Z
     d0c:	51 81       	ldd	r21, Z+1	; 0x01
     d0e:	24 17       	cp	r18, r20
     d10:	35 07       	cpc	r19, r21
     d12:	89 f4       	brne	.+34     	; 0xd36 <OS_Start+0x484>
     d14:	fc 01       	movw	r30, r24
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	e8 1b       	sub	r30, r24
     d24:	f9 0b       	sbc	r31, r25
     d26:	e4 5c       	subi	r30, 0xC4	; 196
     d28:	fd 4f       	sbci	r31, 0xFD	; 253
     d2a:	85 81       	ldd	r24, Z+5	; 0x05
     d2c:	96 81       	ldd	r25, Z+6	; 0x06
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	96 83       	std	Z+6, r25	; 0x06
     d32:	85 83       	std	Z+5, r24	; 0x05
     d34:	0b ce       	rjmp	.-1002   	; 0x94c <OS_Start+0x9a>
     d36:	e4 e7       	ldi	r30, 0x74	; 116
     d38:	f2 e0       	ldi	r31, 0x02	; 2
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	6b 81       	ldd	r22, Y+3	; 0x03
     d40:	7c 81       	ldd	r23, Y+4	; 0x04
     d42:	40 81       	ld	r20, Z
     d44:	51 81       	ldd	r21, Z+1	; 0x01
     d46:	24 17       	cp	r18, r20
     d48:	35 07       	cpc	r19, r21
     d4a:	19 f4       	brne	.+6      	; 0xd52 <OS_Start+0x4a0>
     d4c:	21 15       	cp	r18, r1
     d4e:	31 05       	cpc	r19, r1
     d50:	31 f4       	brne	.+12     	; 0xd5e <OS_Start+0x4ac>
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	e2 5e       	subi	r30, 0xE2	; 226
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	80 31       	cpi	r24, 0x10	; 16
     d5a:	91 05       	cpc	r25, r1
     d5c:	91 f7       	brne	.-28     	; 0xd42 <OS_Start+0x490>
     d5e:	7c 83       	std	Y+4, r23	; 0x04
     d60:	6b 83       	std	Y+3, r22	; 0x03
     d62:	fb 01       	movw	r30, r22
     d64:	e9 5f       	subi	r30, 0xF9	; 249
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	20 81       	ld	r18, Z
     d6a:	31 81       	ldd	r19, Z+1	; 0x01
     d6c:	8a 9d       	mul	r24, r10
     d6e:	f0 01       	movw	r30, r0
     d70:	8b 9d       	mul	r24, r11
     d72:	f0 0d       	add	r31, r0
     d74:	9a 9d       	mul	r25, r10
     d76:	f0 0d       	add	r31, r0
     d78:	11 24       	eor	r1, r1
     d7a:	e5 58       	subi	r30, 0x85	; 133
     d7c:	fc 4f       	sbci	r31, 0xFC	; 252
     d7e:	40 81       	ld	r20, Z
     d80:	51 81       	ldd	r21, Z+1	; 0x01
     d82:	24 17       	cp	r18, r20
     d84:	35 07       	cpc	r19, r21
     d86:	80 f4       	brcc	.+32     	; 0xda8 <OS_Start+0x4f6>
     d88:	fb 01       	movw	r30, r22
     d8a:	e9 5f       	subi	r30, 0xF9	; 249
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	20 81       	ld	r18, Z
     d90:	31 81       	ldd	r19, Z+1	; 0x01
     d92:	8a 9d       	mul	r24, r10
     d94:	f0 01       	movw	r30, r0
     d96:	8b 9d       	mul	r24, r11
     d98:	f0 0d       	add	r31, r0
     d9a:	9a 9d       	mul	r25, r10
     d9c:	f0 0d       	add	r31, r0
     d9e:	11 24       	eor	r1, r1
     da0:	e5 58       	subi	r30, 0x85	; 133
     da2:	fc 4f       	sbci	r31, 0xFC	; 252
     da4:	31 83       	std	Z+1, r19	; 0x01
     da6:	20 83       	st	Z, r18
     da8:	eb 81       	ldd	r30, Y+3	; 0x03
     daa:	fc 81       	ldd	r31, Y+4	; 0x04
     dac:	ec 5f       	subi	r30, 0xFC	; 252
     dae:	fe 4f       	sbci	r31, 0xFE	; 254
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	80 83       	st	Z, r24
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	52 e0       	ldi	r21, 0x02	; 2
     db8:	6c ea       	ldi	r22, 0xAC	; 172
     dba:	76 e1       	ldi	r23, 0x16	; 22
     dbc:	82 e1       	ldi	r24, 0x12	; 18
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	3e d3       	rcall	.+1660   	; 0x143e <enqueueWQ>
     dc2:	27 dc       	rcall	.-1970   	; 0x612 <Dispatch>
     dc4:	c3 cd       	rjmp	.-1146   	; 0x94c <OS_Start+0x9a>
     dc6:	56 dc       	rcall	.-1876   	; 0x674 <Kernel_Unlock_Mutex>
     dc8:	c1 cd       	rjmp	.-1150   	; 0x94c <OS_Start+0x9a>
     dca:	80 91 08 02 	lds	r24, 0x0208
     dce:	90 91 09 02 	lds	r25, 0x0209
     dd2:	08 97       	sbiw	r24, 0x08	; 8
     dd4:	31 f1       	breq	.+76     	; 0xe22 <OS_Start+0x570>
     dd6:	d7 01       	movw	r26, r14
     dd8:	12 96       	adiw	r26, 0x02	; 2
     dda:	8c 91       	ld	r24, X
     ddc:	88 23       	and	r24, r24
     dde:	81 f0       	breq	.+32     	; 0xe00 <OS_Start+0x54e>
     de0:	eb e1       	ldi	r30, 0x1B	; 27
     de2:	f2 e0       	ldi	r31, 0x02	; 2
     de4:	c4 01       	movw	r24, r8
     de6:	4b 81       	ldd	r20, Y+3	; 0x03
     de8:	5c 81       	ldd	r21, Y+4	; 0x04
     dea:	20 81       	ld	r18, Z
     dec:	22 23       	and	r18, r18
     dee:	59 f0       	breq	.+22     	; 0xe06 <OS_Start+0x554>
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	35 96       	adiw	r30, 0x05	; 5
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	91 05       	cpc	r25, r1
     df8:	c1 f7       	brne	.-16     	; 0xdea <OS_Start+0x538>
     dfa:	5c 83       	std	Y+4, r21	; 0x04
     dfc:	4b 83       	std	Y+3, r20	; 0x03
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <OS_Start+0x558>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <OS_Start+0x558>
     e06:	5c 83       	std	Y+4, r21	; 0x04
     e08:	4b 83       	std	Y+3, r20	; 0x03
     e0a:	9c 01       	movw	r18, r24
     e0c:	22 0f       	add	r18, r18
     e0e:	33 1f       	adc	r19, r19
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	8c 5e       	subi	r24, 0xEC	; 236
     e1a:	9d 4f       	sbci	r25, 0xFD	; 253
     e1c:	86 db       	rcall	.-2292   	; 0x52a <Kernel_Init_Event_At>
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	ab 81       	ldd	r26, Y+3	; 0x03
     e24:	bc 81       	ldd	r27, Y+4	; 0x04
     e26:	a2 5f       	subi	r26, 0xF2	; 242
     e28:	be 4f       	sbci	r27, 0xFE	; 254
     e2a:	e9 81       	ldd	r30, Y+1	; 0x01
     e2c:	fa 81       	ldd	r31, Y+2	; 0x02
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	fc 93       	st	X, r31
     e32:	ee 93       	st	-X, r30
     e34:	8b cd       	rjmp	.-1258   	; 0x94c <OS_Start+0x9a>
     e36:	eb 81       	ldd	r30, Y+3	; 0x03
     e38:	fc 81       	ldd	r31, Y+4	; 0x04
     e3a:	e8 5e       	subi	r30, 0xE8	; 232
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	40 81       	ld	r20, Z
     e40:	51 81       	ldd	r21, Z+1	; 0x01
     e42:	d7 01       	movw	r26, r14
     e44:	8d 91       	ld	r24, X+
     e46:	9c 91       	ld	r25, X
     e48:	48 17       	cp	r20, r24
     e4a:	59 07       	cpc	r21, r25
     e4c:	09 f4       	brne	.+2      	; 0xe50 <OS_Start+0x59e>
     e4e:	fa c0       	rjmp	.+500    	; 0x1044 <OS_Start+0x792>
     e50:	f7 01       	movw	r30, r14
     e52:	c4 01       	movw	r24, r8
     e54:	6b 81       	ldd	r22, Y+3	; 0x03
     e56:	7c 81       	ldd	r23, Y+4	; 0x04
     e58:	25 81       	ldd	r18, Z+5	; 0x05
     e5a:	36 81       	ldd	r19, Z+6	; 0x06
     e5c:	42 17       	cp	r20, r18
     e5e:	53 07       	cpc	r21, r19
     e60:	09 f4       	brne	.+2      	; 0xe64 <OS_Start+0x5b2>
     e62:	f3 c0       	rjmp	.+486    	; 0x104a <OS_Start+0x798>
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	35 96       	adiw	r30, 0x05	; 5
     e68:	88 30       	cpi	r24, 0x08	; 8
     e6a:	91 05       	cpc	r25, r1
     e6c:	a9 f7       	brne	.-22     	; 0xe58 <OS_Start+0x5a6>
     e6e:	3d c0       	rjmp	.+122    	; 0xeea <OS_Start+0x638>
     e70:	fc 01       	movw	r30, r24
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	e8 0f       	add	r30, r24
     e7c:	f9 1f       	adc	r31, r25
     e7e:	ec 5e       	subi	r30, 0xEC	; 236
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	22 81       	ldd	r18, Z+2	; 0x02
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	69 f4       	brne	.+26     	; 0xea2 <OS_Start+0x5f0>
     e88:	fc 01       	movw	r30, r24
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	8e 0f       	add	r24, r30
     e94:	9f 1f       	adc	r25, r31
     e96:	fc 01       	movw	r30, r24
     e98:	ec 5e       	subi	r30, 0xEC	; 236
     e9a:	fd 4f       	sbci	r31, 0xFD	; 253
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	82 83       	std	Z+2, r24	; 0x02
     ea0:	24 c0       	rjmp	.+72     	; 0xeea <OS_Start+0x638>
     ea2:	eb 81       	ldd	r30, Y+3	; 0x03
     ea4:	fc 81       	ldd	r31, Y+4	; 0x04
     ea6:	ea 5e       	subi	r30, 0xEA	; 234
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	51 83       	std	Z+1, r21	; 0x01
     eac:	40 83       	st	Z, r20
     eae:	eb 81       	ldd	r30, Y+3	; 0x03
     eb0:	fc 81       	ldd	r31, Y+4	; 0x04
     eb2:	20 81       	ld	r18, Z
     eb4:	31 81       	ldd	r19, Z+1	; 0x01
     eb6:	fc 01       	movw	r30, r24
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	8e 0f       	add	r24, r30
     ec2:	9f 1f       	adc	r25, r31
     ec4:	fc 01       	movw	r30, r24
     ec6:	ec 5e       	subi	r30, 0xEC	; 236
     ec8:	fd 4f       	sbci	r31, 0xFD	; 253
     eca:	34 83       	std	Z+4, r19	; 0x04
     ecc:	23 83       	std	Z+3, r18	; 0x03
     ece:	eb 81       	ldd	r30, Y+3	; 0x03
     ed0:	fc 81       	ldd	r31, Y+4	; 0x04
     ed2:	ec 5f       	subi	r30, 0xFC	; 252
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	85 e0       	ldi	r24, 0x05	; 5
     ed8:	80 83       	st	Z, r24
     eda:	44 e0       	ldi	r20, 0x04	; 4
     edc:	52 e0       	ldi	r21, 0x02	; 2
     ede:	6a e8       	ldi	r22, 0x8A	; 138
     ee0:	76 e1       	ldi	r23, 0x16	; 22
     ee2:	82 e1       	ldi	r24, 0x12	; 18
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	4c d3       	rcall	.+1688   	; 0x1580 <enqueueRQ>
     ee8:	94 db       	rcall	.-2264   	; 0x612 <Dispatch>
     eea:	e0 91 12 02 	lds	r30, 0x0212
     eee:	f0 91 13 02 	lds	r31, 0x0213
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	02 97       	sbiw	r24, 0x02	; 2
     ef8:	20 f4       	brcc	.+8      	; 0xf02 <OS_Start+0x650>
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	e9 d9       	rcall	.-3118   	; 0x2d2 <enable_LED>
     f00:	25 cd       	rjmp	.-1462   	; 0x94c <OS_Start+0x9a>
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	02 97       	sbiw	r24, 0x02	; 2
     f08:	21 f4       	brne	.+8      	; 0xf12 <OS_Start+0x660>
     f0a:	85 e0       	ldi	r24, 0x05	; 5
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	e1 d9       	rcall	.-3134   	; 0x2d2 <enable_LED>
     f10:	1d cd       	rjmp	.-1478   	; 0x94c <OS_Start+0x9a>
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	03 97       	sbiw	r24, 0x03	; 3
     f18:	09 f0       	breq	.+2      	; 0xf1c <OS_Start+0x66a>
     f1a:	18 cd       	rjmp	.-1488   	; 0x94c <OS_Start+0x9a>
     f1c:	86 e0       	ldi	r24, 0x06	; 6
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	d8 d9       	rcall	.-3152   	; 0x2d2 <enable_LED>
     f22:	14 cd       	rjmp	.-1496   	; 0x94c <OS_Start+0x9a>
     f24:	eb 81       	ldd	r30, Y+3	; 0x03
     f26:	fc 81       	ldd	r31, Y+4	; 0x04
     f28:	e8 5e       	subi	r30, 0xE8	; 232
     f2a:	fe 4f       	sbci	r31, 0xFE	; 254
     f2c:	40 81       	ld	r20, Z
     f2e:	51 81       	ldd	r21, Z+1	; 0x01
     f30:	d7 01       	movw	r26, r14
     f32:	8d 91       	ld	r24, X+
     f34:	9c 91       	ld	r25, X
     f36:	48 17       	cp	r20, r24
     f38:	59 07       	cpc	r21, r25
     f3a:	09 f4       	brne	.+2      	; 0xf3e <OS_Start+0x68c>
     f3c:	97 c0       	rjmp	.+302    	; 0x106c <OS_Start+0x7ba>
     f3e:	f7 01       	movw	r30, r14
     f40:	c4 01       	movw	r24, r8
     f42:	6b 81       	ldd	r22, Y+3	; 0x03
     f44:	7c 81       	ldd	r23, Y+4	; 0x04
     f46:	25 81       	ldd	r18, Z+5	; 0x05
     f48:	36 81       	ldd	r19, Z+6	; 0x06
     f4a:	42 17       	cp	r20, r18
     f4c:	53 07       	cpc	r21, r19
     f4e:	09 f4       	brne	.+2      	; 0xf52 <OS_Start+0x6a0>
     f50:	90 c0       	rjmp	.+288    	; 0x1072 <OS_Start+0x7c0>
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	35 96       	adiw	r30, 0x05	; 5
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	91 05       	cpc	r25, r1
     f5a:	a9 f7       	brne	.-22     	; 0xf46 <OS_Start+0x694>
     f5c:	f7 cc       	rjmp	.-1554   	; 0x94c <OS_Start+0x9a>
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	48 17       	cp	r20, r24
     f64:	59 07       	cpc	r21, r25
     f66:	09 f4       	brne	.+2      	; 0xf6a <OS_Start+0x6b8>
     f68:	97 c0       	rjmp	.+302    	; 0x1098 <OS_Start+0x7e6>
     f6a:	2f 5f       	subi	r18, 0xFF	; 255
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	e2 5e       	subi	r30, 0xE2	; 226
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	20 31       	cpi	r18, 0x10	; 16
     f74:	31 05       	cpc	r19, r1
     f76:	99 f7       	brne	.-26     	; 0xf5e <OS_Start+0x6ac>
     f78:	cb 01       	movw	r24, r22
     f7a:	fb 01       	movw	r30, r22
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	8e 0f       	add	r24, r30
     f86:	9f 1f       	adc	r25, r31
     f88:	fc 01       	movw	r30, r24
     f8a:	ec 5e       	subi	r30, 0xEC	; 236
     f8c:	fd 4f       	sbci	r31, 0xFD	; 253
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	82 83       	std	Z+2, r24	; 0x02
     f92:	dc cc       	rjmp	.-1608   	; 0x94c <OS_Start+0x9a>
     f94:	2a 9d       	mul	r18, r10
     f96:	f0 01       	movw	r30, r0
     f98:	2b 9d       	mul	r18, r11
     f9a:	f0 0d       	add	r31, r0
     f9c:	3a 9d       	mul	r19, r10
     f9e:	f0 0d       	add	r31, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	e2 57       	subi	r30, 0x72	; 114
     fa4:	fc 4f       	sbci	r31, 0xFC	; 252
     fa6:	80 81       	ld	r24, Z
     fa8:	91 81       	ldd	r25, Z+1	; 0x01
     faa:	89 2b       	or	r24, r25
     fac:	09 f0       	breq	.+2      	; 0xfb0 <OS_Start+0x6fe>
     fae:	ce cc       	rjmp	.-1636   	; 0x94c <OS_Start+0x9a>
     fb0:	eb 81       	ldd	r30, Y+3	; 0x03
     fb2:	fc 81       	ldd	r31, Y+4	; 0x04
     fb4:	ec 5f       	subi	r30, 0xFC	; 252
     fb6:	fe 4f       	sbci	r31, 0xFE	; 254
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 83       	st	Z, r24
     fbc:	44 e0       	ldi	r20, 0x04	; 4
     fbe:	52 e0       	ldi	r21, 0x02	; 2
     fc0:	6a e8       	ldi	r22, 0x8A	; 138
     fc2:	76 e1       	ldi	r23, 0x16	; 22
     fc4:	82 e1       	ldi	r24, 0x12	; 18
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	db d2       	rcall	.+1462   	; 0x1580 <enqueueRQ>
     fca:	23 db       	rcall	.-2490   	; 0x612 <Dispatch>
     fcc:	bf cc       	rjmp	.-1666   	; 0x94c <OS_Start+0x9a>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <OS_Start+0x726>
     fd4:	7c 83       	std	Y+4, r23	; 0x04
     fd6:	6b 83       	std	Y+3, r22	; 0x03
     fd8:	8a 9d       	mul	r24, r10
     fda:	f0 01       	movw	r30, r0
     fdc:	8b 9d       	mul	r24, r11
     fde:	f0 0d       	add	r31, r0
     fe0:	9a 9d       	mul	r25, r10
     fe2:	f0 0d       	add	r31, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	e2 57       	subi	r30, 0x72	; 114
     fe8:	fc 4f       	sbci	r31, 0xFC	; 252
     fea:	91 82       	std	Z+1, r9	; 0x01
     fec:	80 82       	st	Z, r8
     fee:	63 cd       	rjmp	.-1338   	; 0xab6 <OS_Start+0x204>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <OS_Start+0x748>
     ff6:	7c 83       	std	Y+4, r23	; 0x04
     ff8:	6b 83       	std	Y+3, r22	; 0x03
     ffa:	8a 9d       	mul	r24, r10
     ffc:	f0 01       	movw	r30, r0
     ffe:	8b 9d       	mul	r24, r11
    1000:	f0 0d       	add	r31, r0
    1002:	9a 9d       	mul	r25, r10
    1004:	f0 0d       	add	r31, r0
    1006:	11 24       	eor	r1, r1
    1008:	e2 57       	subi	r30, 0x72	; 114
    100a:	fc 4f       	sbci	r31, 0xFC	; 252
    100c:	20 81       	ld	r18, Z
    100e:	31 81       	ldd	r19, Z+1	; 0x01
    1010:	21 30       	cpi	r18, 0x01	; 1
    1012:	31 05       	cpc	r19, r1
    1014:	09 f0       	breq	.+2      	; 0x1018 <OS_Start+0x766>
    1016:	9a cc       	rjmp	.-1740   	; 0x94c <OS_Start+0x9a>
    1018:	7f cd       	rjmp	.-1282   	; 0xb18 <OS_Start+0x266>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <OS_Start+0x772>
    1020:	7c 83       	std	Y+4, r23	; 0x04
    1022:	6b 83       	std	Y+3, r22	; 0x03
    1024:	fc 01       	movw	r30, r24
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	e8 1b       	sub	r30, r24
    1034:	f9 0b       	sbc	r31, r25
    1036:	e4 5c       	subi	r30, 0xC4	; 196
    1038:	fd 4f       	sbci	r31, 0xFD	; 253
    103a:	22 81       	ldd	r18, Z+2	; 0x02
    103c:	21 30       	cpi	r18, 0x01	; 1
    103e:	09 f0       	breq	.+2      	; 0x1042 <OS_Start+0x790>
    1040:	55 ce       	rjmp	.-854    	; 0xcec <OS_Start+0x43a>
    1042:	3b ce       	rjmp	.-906    	; 0xcba <OS_Start+0x408>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <OS_Start+0x79c>
    104a:	7c 83       	std	Y+4, r23	; 0x04
    104c:	6b 83       	std	Y+3, r22	; 0x03
    104e:	fc 01       	movw	r30, r24
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	e8 0f       	add	r30, r24
    105a:	f9 1f       	adc	r31, r25
    105c:	ec 5e       	subi	r30, 0xEC	; 236
    105e:	fd 4f       	sbci	r31, 0xFD	; 253
    1060:	23 81       	ldd	r18, Z+3	; 0x03
    1062:	34 81       	ldd	r19, Z+4	; 0x04
    1064:	23 2b       	or	r18, r19
    1066:	09 f0       	breq	.+2      	; 0x106a <OS_Start+0x7b8>
    1068:	40 cf       	rjmp	.-384    	; 0xeea <OS_Start+0x638>
    106a:	02 cf       	rjmp	.-508    	; 0xe70 <OS_Start+0x5be>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <OS_Start+0x7c4>
    1072:	7c 83       	std	Y+4, r23	; 0x04
    1074:	6b 83       	std	Y+3, r22	; 0x03
    1076:	ea e8       	ldi	r30, 0x8A	; 138
    1078:	f3 e0       	ldi	r31, 0x03	; 3
    107a:	20 81       	ld	r18, Z
    107c:	31 81       	ldd	r19, Z+1	; 0x01
    107e:	42 17       	cp	r20, r18
    1080:	53 07       	cpc	r21, r19
    1082:	39 f0       	breq	.+14     	; 0x1092 <OS_Start+0x7e0>
    1084:	e8 ea       	ldi	r30, 0xA8	; 168
    1086:	f4 e0       	ldi	r31, 0x04	; 4
    1088:	94 01       	movw	r18, r8
    108a:	ab 81       	ldd	r26, Y+3	; 0x03
    108c:	bc 81       	ldd	r27, Y+4	; 0x04
    108e:	bc 01       	movw	r22, r24
    1090:	66 cf       	rjmp	.-308    	; 0xf5e <OS_Start+0x6ac>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	03 c0       	rjmp	.+6      	; 0x109e <OS_Start+0x7ec>
    1098:	bc 83       	std	Y+4, r27	; 0x04
    109a:	ab 83       	std	Y+3, r26	; 0x03
    109c:	cb 01       	movw	r24, r22
    109e:	2a 9d       	mul	r18, r10
    10a0:	a0 01       	movw	r20, r0
    10a2:	2b 9d       	mul	r18, r11
    10a4:	50 0d       	add	r21, r0
    10a6:	3a 9d       	mul	r19, r10
    10a8:	50 0d       	add	r21, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	4c 58       	subi	r20, 0x8C	; 140
    10ae:	5d 4f       	sbci	r21, 0xFD	; 253
    10b0:	fa 01       	movw	r30, r20
    10b2:	ec 5f       	subi	r30, 0xFC	; 252
    10b4:	fe 4f       	sbci	r31, 0xFE	; 254
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	60 83       	st	Z, r22
    10ba:	72 96       	adiw	r30, 0x12	; 18
    10bc:	31 82       	std	Z+1, r3	; 0x01
    10be:	20 82       	st	Z, r2
    10c0:	fc 01       	movw	r30, r24
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	8e 0f       	add	r24, r30
    10cc:	9f 1f       	adc	r25, r31
    10ce:	fc 01       	movw	r30, r24
    10d0:	ec 5e       	subi	r30, 0xEC	; 236
    10d2:	fd 4f       	sbci	r31, 0xFD	; 253
    10d4:	14 82       	std	Z+4, r1	; 0x04
    10d6:	13 82       	std	Z+3, r1	; 0x03
    10d8:	eb 81       	ldd	r30, Y+3	; 0x03
    10da:	fc 81       	ldd	r31, Y+4	; 0x04
    10dc:	e9 5f       	subi	r30, 0xF9	; 249
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	fa 01       	movw	r30, r20
    10e6:	e9 5f       	subi	r30, 0xF9	; 249
    10e8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ea:	40 81       	ld	r20, Z
    10ec:	51 81       	ldd	r21, Z+1	; 0x01
    10ee:	48 17       	cp	r20, r24
    10f0:	59 07       	cpc	r21, r25
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <OS_Start+0x844>
    10f4:	4f cf       	rjmp	.-354    	; 0xf94 <OS_Start+0x6e2>
    10f6:	2a cc       	rjmp	.-1964   	; 0x94c <OS_Start+0x9a>
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	bf 90       	pop	r11
    1112:	af 90       	pop	r10
    1114:	9f 90       	pop	r9
    1116:	8f 90       	pop	r8
    1118:	7f 90       	pop	r7
    111a:	6f 90       	pop	r6
    111c:	5f 90       	pop	r5
    111e:	4f 90       	pop	r4
    1120:	3f 90       	pop	r3
    1122:	2f 90       	pop	r2
    1124:	08 95       	ret

00001126 <Mutex_Init>:
    1126:	80 91 10 02 	lds	r24, 0x0210
    112a:	90 91 11 02 	lds	r25, 0x0211
    112e:	89 2b       	or	r24, r25
    1130:	99 f0       	breq	.+38     	; 0x1158 <Mutex_Init+0x32>
    1132:	f8 94       	cli
    1134:	e0 91 12 02 	lds	r30, 0x0212
    1138:	f0 91 13 02 	lds	r31, 0x0213
    113c:	e3 5f       	subi	r30, 0xF3	; 243
    113e:	fe 4f       	sbci	r31, 0xFE	; 254
    1140:	87 e0       	ldi	r24, 0x07	; 7
    1142:	80 83       	st	Z, r24
    1144:	53 d8       	rcall	.-3930   	; 0x1ec <Enter_Kernel>
    1146:	e0 91 12 02 	lds	r30, 0x0212
    114a:	f0 91 13 02 	lds	r31, 0x0213
    114e:	e2 5f       	subi	r30, 0xF2	; 242
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	08 95       	ret
    1158:	08 95       	ret

0000115a <Event_Init>:
    115a:	80 91 10 02 	lds	r24, 0x0210
    115e:	90 91 11 02 	lds	r25, 0x0211
    1162:	89 2b       	or	r24, r25
    1164:	99 f0       	breq	.+38     	; 0x118c <Event_Init+0x32>
    1166:	f8 94       	cli
    1168:	e0 91 12 02 	lds	r30, 0x0212
    116c:	f0 91 13 02 	lds	r31, 0x0213
    1170:	e3 5f       	subi	r30, 0xF3	; 243
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	80 83       	st	Z, r24
    1178:	39 d8       	rcall	.-3982   	; 0x1ec <Enter_Kernel>
    117a:	e0 91 12 02 	lds	r30, 0x0212
    117e:	f0 91 13 02 	lds	r31, 0x0213
    1182:	e2 5f       	subi	r30, 0xF2	; 242
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	08 95       	ret
    118c:	08 95       	ret

0000118e <Task_Create>:
    118e:	20 91 10 02 	lds	r18, 0x0210
    1192:	30 91 11 02 	lds	r19, 0x0211
    1196:	23 2b       	or	r18, r19
    1198:	e9 f0       	breq	.+58     	; 0x11d4 <Task_Create+0x46>
    119a:	f8 94       	cli
    119c:	20 91 12 02 	lds	r18, 0x0212
    11a0:	30 91 13 02 	lds	r19, 0x0213
    11a4:	f9 01       	movw	r30, r18
    11a6:	e3 5f       	subi	r30, 0xF3	; 243
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	a1 e0       	ldi	r26, 0x01	; 1
    11ac:	a0 83       	st	Z, r26
    11ae:	32 97       	sbiw	r30, 0x02	; 2
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24
    11b4:	36 97       	sbiw	r30, 0x06	; 6
    11b6:	71 83       	std	Z+1, r23	; 0x01
    11b8:	60 83       	st	Z, r22
    11ba:	34 96       	adiw	r30, 0x04	; 4
    11bc:	51 83       	std	Z+1, r21	; 0x01
    11be:	40 83       	st	Z, r20
    11c0:	15 d8       	rcall	.-4054   	; 0x1ec <Enter_Kernel>
    11c2:	e0 91 12 02 	lds	r30, 0x0212
    11c6:	f0 91 13 02 	lds	r31, 0x0213
    11ca:	e2 5f       	subi	r30, 0xF2	; 242
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	08 95       	ret
    11d4:	65 c9       	rjmp	.-3382   	; 0x4a0 <Kernel_Create_Task>
    11d6:	08 95       	ret

000011d8 <Task_Next>:
    11d8:	80 91 10 02 	lds	r24, 0x0210
    11dc:	90 91 11 02 	lds	r25, 0x0211
    11e0:	89 2b       	or	r24, r25
    11e2:	59 f0       	breq	.+22     	; 0x11fa <Task_Next+0x22>
    11e4:	f8 94       	cli
    11e6:	e0 91 12 02 	lds	r30, 0x0212
    11ea:	f0 91 13 02 	lds	r31, 0x0213
    11ee:	e3 5f       	subi	r30, 0xF3	; 243
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	80 83       	st	Z, r24
    11f6:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    11fa:	08 95       	ret

000011fc <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    11fc:	58 d8       	rcall	.-3920   	; 0x2ae <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    11fe:	63 d8       	rcall	.-3898   	; 0x2c6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    1200:	5c d8       	rcall	.-3912   	; 0x2ba <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    1202:	49 d8       	rcall	.-3950   	; 0x296 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    1204:	4e d8       	rcall	.-3940   	; 0x2a2 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    1206:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    1208:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    120c:	e1 e8       	ldi	r30, 0x81	; 129
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    1212:	10 92 85 00 	sts	0x0085, r1
    1216:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    121a:	80 e7       	ldi	r24, 0x70	; 112
    121c:	92 e0       	ldi	r25, 0x02	; 2
    121e:	90 93 89 00 	sts	0x0089, r25
    1222:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    1226:	80 81       	ld	r24, Z
    1228:	88 60       	ori	r24, 0x08	; 8
    122a:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    122c:	80 81       	ld	r24, Z
    122e:	84 60       	ori	r24, 0x04	; 4
    1230:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    1232:	ef e6       	ldi	r30, 0x6F	; 111
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    123c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    1240:	e1 e9       	ldi	r30, 0x91	; 145
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    1246:	10 92 95 00 	sts	0x0095, r1
    124a:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    124e:	83 e2       	ldi	r24, 0x23	; 35
    1250:	94 ef       	ldi	r25, 0xF4	; 244
    1252:	90 93 99 00 	sts	0x0099, r25
    1256:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    125a:	80 81       	ld	r24, Z
    125c:	88 60       	ori	r24, 0x08	; 8
    125e:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    1260:	80 81       	ld	r24, Z
    1262:	84 60       	ori	r24, 0x04	; 4
    1264:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    1266:	82 e0       	ldi	r24, 0x02	; 2
    1268:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    126c:	78 94       	sei
    126e:	08 95       	ret

00001270 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	0b b6       	in	r0, 0x3b	; 59
    127c:	0f 92       	push	r0
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	2f 93       	push	r18
    128a:	3f 93       	push	r19
    128c:	4f 93       	push	r20
    128e:	5f 93       	push	r21
    1290:	6f 93       	push	r22
    1292:	7f 93       	push	r23
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	af 93       	push	r26
    129a:	bf 93       	push	r27
    129c:	ef 93       	push	r30
    129e:	ff 93       	push	r31
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <__vector_17+0x36>
    12a6:	1f 92       	push	r1
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    12ac:	80 91 02 02 	lds	r24, 0x0202
    12b0:	90 91 03 02 	lds	r25, 0x0203
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	99 23       	and	r25, r25
    12c0:	0c f4       	brge	.+2      	; 0x12c4 <__vector_17+0x54>
    12c2:	7c c0       	rjmp	.+248    	; 0x13bc <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    12c4:	e9 81       	ldd	r30, Y+1	; 0x01
    12c6:	fa 81       	ldd	r31, Y+2	; 0x02
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	e6 59       	subi	r30, 0x96	; 150
    12ce:	f9 4e       	sbci	r31, 0xE9	; 233
    12d0:	01 90       	ld	r0, Z+
    12d2:	f0 81       	ld	r31, Z
    12d4:	e0 2d       	mov	r30, r0
    12d6:	e0 5f       	subi	r30, 0xF0	; 240
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	20 81       	ld	r18, Z
    12dc:	31 81       	ldd	r19, Z+1	; 0x01
    12de:	80 91 06 02 	lds	r24, 0x0206
    12e2:	90 91 07 02 	lds	r25, 0x0207
    12e6:	82 17       	cp	r24, r18
    12e8:	93 07       	cpc	r25, r19
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <__vector_17+0x7e>
    12ec:	67 c0       	rjmp	.+206    	; 0x13bc <__vector_17+0x14c>
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	e6 59       	subi	r30, 0x96	; 150
    12f8:	f9 4e       	sbci	r31, 0xE9	; 233
    12fa:	01 90       	ld	r0, Z+
    12fc:	f0 81       	ld	r31, Z
    12fe:	e0 2d       	mov	r30, r0
    1300:	ee 5e       	subi	r30, 0xEE	; 238
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	20 81       	ld	r18, Z
    1306:	31 81       	ldd	r19, Z+1	; 0x01
    1308:	80 91 94 00 	lds	r24, 0x0094
    130c:	90 91 95 00 	lds	r25, 0x0095
    1310:	61 e7       	ldi	r22, 0x71	; 113
    1312:	72 e0       	ldi	r23, 0x02	; 2
    1314:	f6 d3       	rcall	.+2028   	; 0x1b02 <__udivmodhi4>
    1316:	62 17       	cp	r22, r18
    1318:	73 07       	cpc	r23, r19
    131a:	58 f5       	brcc	.+86     	; 0x1372 <__vector_17+0x102>
    131c:	4f c0       	rjmp	.+158    	; 0x13bc <__vector_17+0x14c>
    131e:	e9 81       	ldd	r30, Y+1	; 0x01
    1320:	fa 81       	ldd	r31, Y+2	; 0x02
    1322:	ee 0f       	add	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	e6 59       	subi	r30, 0x96	; 150
    1328:	f9 4e       	sbci	r31, 0xE9	; 233
    132a:	01 90       	ld	r0, Z+
    132c:	f0 81       	ld	r31, Z
    132e:	e0 2d       	mov	r30, r0
    1330:	e0 5f       	subi	r30, 0xF0	; 240
    1332:	fe 4f       	sbci	r31, 0xFE	; 254
    1334:	20 81       	ld	r18, Z
    1336:	31 81       	ldd	r19, Z+1	; 0x01
    1338:	80 91 06 02 	lds	r24, 0x0206
    133c:	90 91 07 02 	lds	r25, 0x0207
    1340:	82 17       	cp	r24, r18
    1342:	93 07       	cpc	r25, r19
    1344:	d8 f1       	brcs	.+118    	; 0x13bc <__vector_17+0x14c>
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	e6 59       	subi	r30, 0x96	; 150
    1350:	f9 4e       	sbci	r31, 0xE9	; 233
    1352:	01 90       	ld	r0, Z+
    1354:	f0 81       	ld	r31, Z
    1356:	e0 2d       	mov	r30, r0
    1358:	ee 5e       	subi	r30, 0xEE	; 238
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	20 81       	ld	r18, Z
    135e:	31 81       	ldd	r19, Z+1	; 0x01
    1360:	f7 01       	movw	r30, r14
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	b8 01       	movw	r22, r16
    1368:	cc d3       	rcall	.+1944   	; 0x1b02 <__udivmodhi4>
    136a:	62 17       	cp	r22, r18
    136c:	73 07       	cpc	r23, r19
    136e:	50 f4       	brcc	.+20     	; 0x1384 <__vector_17+0x114>
    1370:	25 c0       	rjmp	.+74     	; 0x13bc <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    1372:	dd 24       	eor	r13, r13
    1374:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1376:	0f 2e       	mov	r0, r31
    1378:	f4 e9       	ldi	r31, 0x94	; 148
    137a:	ef 2e       	mov	r14, r31
    137c:	f1 2c       	mov	r15, r1
    137e:	f0 2d       	mov	r31, r0
    1380:	01 e7       	ldi	r16, 0x71	; 113
    1382:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    1384:	62 e0       	ldi	r22, 0x02	; 2
    1386:	72 e0       	ldi	r23, 0x02	; 2
    1388:	8a e6       	ldi	r24, 0x6A	; 106
    138a:	96 e1       	ldi	r25, 0x16	; 22
    138c:	1c d2       	rcall	.+1080   	; 0x17c6 <dequeue>
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1392:	fc 01       	movw	r30, r24
    1394:	ec 5f       	subi	r30, 0xFC	; 252
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    139a:	44 e0       	ldi	r20, 0x04	; 4
    139c:	52 e0       	ldi	r21, 0x02	; 2
    139e:	6a e8       	ldi	r22, 0x8A	; 138
    13a0:	76 e1       	ldi	r23, 0x16	; 22
    13a2:	ce 01       	movw	r24, r28
    13a4:	03 96       	adiw	r24, 0x03	; 3
    13a6:	ec d0       	rcall	.+472    	; 0x1580 <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	99 23       	and	r25, r25
    13b8:	0c f0       	brlt	.+2      	; 0x13bc <__vector_17+0x14c>
    13ba:	b1 cf       	rjmp	.-158    	; 0x131e <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    13bc:	0d df       	rcall	.-486    	; 0x11d8 <Task_Next>
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	0f 90       	pop	r0
    13ee:	0b be       	out	0x3b, r0	; 59
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
	tickOverflowCount += 1;
    1408:	80 91 06 02 	lds	r24, 0x0206
    140c:	90 91 07 02 	lds	r25, 0x0207
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	90 93 07 02 	sts	0x0207, r25
    1416:	80 93 06 02 	sts	0x0206, r24
}
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    1428:	e9 de       	rcall	.-558    	; 0x11fc <setup>

	OS_Init();
    142a:	96 d8       	rcall	.-3796   	; 0x558 <OS_Init>
	Task_Create(a_main, 0, 1);
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	82 e9       	ldi	r24, 0x92	; 146
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	aa de       	rcall	.-684    	; 0x118e <Task_Create>
	OS_Start();
    143a:	3b ca       	rjmp	.-2954   	; 0x8b2 <OS_Start>
    143c:	08 95       	ret

0000143e <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1444:	28 81       	ld	r18, Y
    1446:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1448:	2f 30       	cpi	r18, 0x0F	; 15
    144a:	31 05       	cpc	r19, r1
    144c:	29 f1       	breq	.+74     	; 0x1498 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    144e:	e8 81       	ld	r30, Y
    1450:	f9 81       	ldd	r31, Y+1	; 0x01
    1452:	9f 01       	movw	r18, r30
    1454:	21 50       	subi	r18, 0x01	; 1
    1456:	31 09       	sbc	r19, r1

    while(i >= 0) {
    1458:	72 f0       	brmi	.+28     	; 0x1476 <enqueueWQ+0x38>
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	e6 0f       	add	r30, r22
    1460:	f7 1f       	adc	r31, r23
    1462:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1464:	32 91       	ld	r19, -Z
    1466:	22 91       	ld	r18, -Z
    1468:	33 83       	std	Z+3, r19	; 0x03
    146a:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    146c:	ea 17       	cp	r30, r26
    146e:	fb 07       	cpc	r31, r27
    1470:	c9 f7       	brne	.-14     	; 0x1464 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1472:	2f ef       	ldi	r18, 0xFF	; 255
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    1476:	fc 01       	movw	r30, r24
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	2f 5f       	subi	r18, 0xFF	; 255
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	22 0f       	add	r18, r18
    1482:	33 1f       	adc	r19, r19
    1484:	fb 01       	movw	r30, r22
    1486:	e2 0f       	add	r30, r18
    1488:	f3 1f       	adc	r31, r19
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    (*QCount)++;
    148e:	88 81       	ld	r24, Y
    1490:	99 81       	ldd	r25, Y+1	; 0x01
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	99 83       	std	Y+1, r25	; 0x01
    1496:	88 83       	st	Y, r24
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    14ae:	ea 01       	movw	r28, r20
    14b0:	28 81       	ld	r18, Y
    14b2:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    14b4:	2f 30       	cpi	r18, 0x0F	; 15
    14b6:	31 05       	cpc	r19, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <enqueueSQ+0x1e>
    14ba:	59 c0       	rjmp	.+178    	; 0x156e <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    14bc:	a8 81       	ld	r26, Y
    14be:	b9 81       	ldd	r27, Y+1	; 0x01
    14c0:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    14c2:	fc 01       	movw	r30, r24
    14c4:	c0 80       	ld	r12, Z
    14c6:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    14c8:	fd 01       	movw	r30, r26
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	eb 01       	movw	r28, r22
    14d0:	ce 0f       	add	r28, r30
    14d2:	df 1f       	adc	r29, r31
    14d4:	28 81       	ld	r18, Y
    14d6:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    14d8:	bb 23       	and	r27, r27
    14da:	cc f1       	brlt	.+114    	; 0x154e <enqueueSQ+0xb0>
    14dc:	fe 01       	movw	r30, r28
    14de:	76 01       	movw	r14, r12
    14e0:	c0 ef       	ldi	r28, 0xF0	; 240
    14e2:	ec 1a       	sub	r14, r28
    14e4:	ce ef       	ldi	r28, 0xFE	; 254
    14e6:	fc 0a       	sbc	r15, r28
    14e8:	de ee       	ldi	r29, 0xEE	; 238
    14ea:	cd 1a       	sub	r12, r29
    14ec:	de ef       	ldi	r29, 0xFE	; 254
    14ee:	dd 0a       	sbc	r13, r29
    14f0:	0b c0       	rjmp	.+22     	; 0x1508 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    14f2:	20 81       	ld	r18, Z
    14f4:	31 81       	ldd	r19, Z+1	; 0x01
    14f6:	33 83       	std	Z+3, r19	; 0x03
    14f8:	22 83       	std	Z+2, r18	; 0x02
        i--;
    14fa:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    14fc:	32 91       	ld	r19, -Z
    14fe:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1500:	af 3f       	cpi	r26, 0xFF	; 255
    1502:	cf ef       	ldi	r28, 0xFF	; 255
    1504:	bc 07       	cpc	r27, r28
    1506:	19 f1       	breq	.+70     	; 0x154e <enqueueSQ+0xb0>
    1508:	e7 01       	movw	r28, r14
    150a:	08 81       	ld	r16, Y
    150c:	19 81       	ldd	r17, Y+1	; 0x01
    150e:	e9 01       	movw	r28, r18
    1510:	c0 5f       	subi	r28, 0xF0	; 240
    1512:	de 4f       	sbci	r29, 0xFE	; 254
    1514:	09 90       	ld	r0, Y+
    1516:	d8 81       	ld	r29, Y
    1518:	c0 2d       	mov	r28, r0
    151a:	c0 17       	cp	r28, r16
    151c:	d1 07       	cpc	r29, r17
    151e:	48 f3       	brcs	.-46     	; 0x14f2 <enqueueSQ+0x54>
    1520:	e7 01       	movw	r28, r14
    1522:	08 81       	ld	r16, Y
    1524:	19 81       	ldd	r17, Y+1	; 0x01
    1526:	e9 01       	movw	r28, r18
    1528:	c0 5f       	subi	r28, 0xF0	; 240
    152a:	de 4f       	sbci	r29, 0xFE	; 254
    152c:	09 90       	ld	r0, Y+
    152e:	d8 81       	ld	r29, Y
    1530:	c0 2d       	mov	r28, r0
    1532:	0c 17       	cp	r16, r28
    1534:	1d 07       	cpc	r17, r29
    1536:	58 f0       	brcs	.+22     	; 0x154e <enqueueSQ+0xb0>
    1538:	e6 01       	movw	r28, r12
    153a:	08 81       	ld	r16, Y
    153c:	19 81       	ldd	r17, Y+1	; 0x01
    153e:	2e 5e       	subi	r18, 0xEE	; 238
    1540:	3e 4f       	sbci	r19, 0xFE	; 254
    1542:	e9 01       	movw	r28, r18
    1544:	28 81       	ld	r18, Y
    1546:	39 81       	ldd	r19, Y+1	; 0x01
    1548:	02 17       	cp	r16, r18
    154a:	13 07       	cpc	r17, r19
    154c:	90 f6       	brcc	.-92     	; 0x14f2 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    154e:	fc 01       	movw	r30, r24
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	11 96       	adiw	r26, 0x01	; 1
    1556:	aa 0f       	add	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	a6 0f       	add	r26, r22
    155c:	b7 1f       	adc	r27, r23
    155e:	8d 93       	st	X+, r24
    1560:	9c 93       	st	X, r25
    (*QCount)++;
    1562:	ea 01       	movw	r28, r20
    1564:	88 81       	ld	r24, Y
    1566:	99 81       	ldd	r25, Y+1	; 0x01
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	99 83       	std	Y+1, r25	; 0x01
    156c:	88 83       	st	Y, r24
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	df 90       	pop	r13
    157c:	cf 90       	pop	r12
    157e:	08 95       	ret

00001580 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1592:	ea 01       	movw	r28, r20
    1594:	28 81       	ld	r18, Y
    1596:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1598:	2f 30       	cpi	r18, 0x0F	; 15
    159a:	31 05       	cpc	r19, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <enqueueRQ+0x20>
    159e:	4a c0       	rjmp	.+148    	; 0x1634 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    15a0:	28 81       	ld	r18, Y
    15a2:	39 81       	ldd	r19, Y+1	; 0x01
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    15a8:	fc 01       	movw	r30, r24
    15aa:	00 81       	ld	r16, Z
    15ac:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    15ae:	f9 01       	movw	r30, r18
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	db 01       	movw	r26, r22
    15b6:	ae 0f       	add	r26, r30
    15b8:	bf 1f       	adc	r27, r31
    15ba:	4d 91       	ld	r20, X+
    15bc:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    15be:	33 23       	and	r19, r19
    15c0:	3c f1       	brlt	.+78     	; 0x1610 <enqueueRQ+0x90>
    15c2:	d8 01       	movw	r26, r16
    15c4:	a9 5f       	subi	r26, 0xF9	; 249
    15c6:	be 4f       	sbci	r27, 0xFE	; 254
    15c8:	ed 90       	ld	r14, X+
    15ca:	fc 90       	ld	r15, X
    15cc:	da 01       	movw	r26, r20
    15ce:	a9 5f       	subi	r26, 0xF9	; 249
    15d0:	be 4f       	sbci	r27, 0xFE	; 254
    15d2:	4d 91       	ld	r20, X+
    15d4:	5c 91       	ld	r21, X
    15d6:	e4 16       	cp	r14, r20
    15d8:	f5 06       	cpc	r15, r21
    15da:	d0 f0       	brcs	.+52     	; 0x1610 <enqueueRQ+0x90>
    15dc:	e6 0f       	add	r30, r22
    15de:	f7 1f       	adc	r31, r23
    15e0:	09 5f       	subi	r16, 0xF9	; 249
    15e2:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    15e4:	a0 81       	ld	r26, Z
    15e6:	b1 81       	ldd	r27, Z+1	; 0x01
    15e8:	b3 83       	std	Z+3, r27	; 0x03
    15ea:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    15ec:	21 50       	subi	r18, 0x01	; 1
    15ee:	31 09       	sbc	r19, r1
        temp = Queue[i];
    15f0:	b2 91       	ld	r27, -Z
    15f2:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    15f4:	2f 3f       	cpi	r18, 0xFF	; 255
    15f6:	4f ef       	ldi	r20, 0xFF	; 255
    15f8:	34 07       	cpc	r19, r20
    15fa:	51 f0       	breq	.+20     	; 0x1610 <enqueueRQ+0x90>
    15fc:	e8 01       	movw	r28, r16
    15fe:	e8 80       	ld	r14, Y
    1600:	f9 80       	ldd	r15, Y+1	; 0x01
    1602:	a9 5f       	subi	r26, 0xF9	; 249
    1604:	be 4f       	sbci	r27, 0xFE	; 254
    1606:	4d 91       	ld	r20, X+
    1608:	5c 91       	ld	r21, X
    160a:	e4 16       	cp	r14, r20
    160c:	f5 06       	cpc	r15, r21
    160e:	50 f7       	brcc	.-44     	; 0x15e4 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1610:	fc 01       	movw	r30, r24
    1612:	80 81       	ld	r24, Z
    1614:	91 81       	ldd	r25, Z+1	; 0x01
    1616:	2f 5f       	subi	r18, 0xFF	; 255
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	fb 01       	movw	r30, r22
    1620:	e2 0f       	add	r30, r18
    1622:	f3 1f       	adc	r31, r19
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
    (*QCount)++;
    1628:	e6 01       	movw	r28, r12
    162a:	88 81       	ld	r24, Y
    162c:	99 81       	ldd	r25, Y+1	; 0x01
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	99 83       	std	Y+1, r25	; 0x01
    1632:	88 83       	st	Y, r24
}
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	08 95       	ret

00001646 <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    164e:	eb 01       	movw	r28, r22
    1650:	28 81       	ld	r18, Y
    1652:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1654:	23 2b       	or	r18, r19
    1656:	09 f4       	brne	.+2      	; 0x165a <dequeueWQ+0x14>
    1658:	54 c0       	rjmp	.+168    	; 0x1702 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    165a:	28 81       	ld	r18, Y
    165c:	39 81       	ldd	r19, Y+1	; 0x01
    165e:	21 50       	subi	r18, 0x01	; 1
    1660:	31 09       	sbc	r19, r1
    1662:	0a f4       	brpl	.+2      	; 0x1666 <dequeueWQ+0x20>
    1664:	51 c0       	rjmp	.+162    	; 0x1708 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    1666:	e9 01       	movw	r28, r18
    1668:	cc 0f       	add	r28, r28
    166a:	dd 1f       	adc	r29, r29
    166c:	fc 01       	movw	r30, r24
    166e:	ec 0f       	add	r30, r28
    1670:	fd 1f       	adc	r31, r29
    1672:	a0 81       	ld	r26, Z
    1674:	b1 81       	ldd	r27, Z+1	; 0x01
    1676:	fd 01       	movw	r30, r26
    1678:	ec 5e       	subi	r30, 0xEC	; 236
    167a:	fe 4f       	sbci	r31, 0xFE	; 254
    167c:	01 90       	ld	r0, Z+
    167e:	f0 81       	ld	r31, Z
    1680:	e0 2d       	mov	r30, r0
    1682:	e4 17       	cp	r30, r20
    1684:	f5 07       	cpc	r31, r21
    1686:	81 f4       	brne	.+32     	; 0x16a8 <dequeueWQ+0x62>
    1688:	0a c0       	rjmp	.+20     	; 0x169e <dequeueWQ+0x58>
    168a:	ba 91       	ld	r27, -Y
    168c:	aa 91       	ld	r26, -Y
    168e:	fd 01       	movw	r30, r26
    1690:	ec 5e       	subi	r30, 0xEC	; 236
    1692:	fe 4f       	sbci	r31, 0xFE	; 254
    1694:	00 81       	ld	r16, Z
    1696:	11 81       	ldd	r17, Z+1	; 0x01
    1698:	04 17       	cp	r16, r20
    169a:	15 07       	cpc	r17, r21
    169c:	39 f4       	brne	.+14     	; 0x16ac <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    169e:	10 97       	sbiw	r26, 0x00	; 0
    16a0:	59 f4       	brne	.+22     	; 0x16b8 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	32 c0       	rjmp	.+100    	; 0x170c <dequeueWQ+0xc6>
    16a8:	c8 0f       	add	r28, r24
    16aa:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	31 09       	sbc	r19, r1
    16b0:	60 f7       	brcc	.-40     	; 0x168a <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	2a c0       	rjmp	.+84     	; 0x170c <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    16b8:	eb 01       	movw	r28, r22
    16ba:	48 81       	ld	r20, Y
    16bc:	59 81       	ldd	r21, Y+1	; 0x01
    16be:	41 50       	subi	r20, 0x01	; 1
    16c0:	51 09       	sbc	r21, r1
    16c2:	24 17       	cp	r18, r20
    16c4:	35 07       	cpc	r19, r21
    16c6:	a4 f4       	brge	.+40     	; 0x16f0 <dequeueWQ+0xaa>
    16c8:	a9 01       	movw	r20, r18
    16ca:	44 0f       	add	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	fc 01       	movw	r30, r24
    16d0:	e4 0f       	add	r30, r20
    16d2:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	81 93       	st	Z+, r24
    16da:	91 93       	st	Z+, r25
            i++;
    16dc:	2f 5f       	subi	r18, 0xFF	; 255
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    16e0:	eb 01       	movw	r28, r22
    16e2:	48 81       	ld	r20, Y
    16e4:	59 81       	ldd	r21, Y+1	; 0x01
    16e6:	41 50       	subi	r20, 0x01	; 1
    16e8:	51 09       	sbc	r21, r1
    16ea:	24 17       	cp	r18, r20
    16ec:	35 07       	cpc	r19, r21
    16ee:	94 f3       	brlt	.-28     	; 0x16d4 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    16f0:	fb 01       	movw	r30, r22
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    16fc:	8a 2f       	mov	r24, r26
    16fe:	9b 2f       	mov	r25, r27
    1700:	05 c0       	rjmp	.+10     	; 0x170c <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	08 95       	ret

00001716 <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    171c:	28 81       	ld	r18, Y
    171e:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1720:	23 2b       	or	r18, r19
    1722:	09 f4       	brne	.+2      	; 0x1726 <dequeueRQ+0x10>
    1724:	48 c0       	rjmp	.+144    	; 0x17b6 <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1726:	e8 81       	ld	r30, Y
    1728:	f9 81       	ldd	r31, Y+1	; 0x01
    172a:	9f 01       	movw	r18, r30
    172c:	21 50       	subi	r18, 0x01	; 1
    172e:	31 09       	sbc	r19, r1
    1730:	0a f4       	brpl	.+2      	; 0x1734 <dequeueRQ+0x1e>
    1732:	44 c0       	rjmp	.+136    	; 0x17bc <dequeueRQ+0xa6>
    1734:	ee 0f       	add	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	e8 0f       	add	r30, r24
    173a:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    173c:	52 91       	ld	r21, -Z
    173e:	42 91       	ld	r20, -Z
    1740:	da 01       	movw	r26, r20
    1742:	a6 5e       	subi	r26, 0xE6	; 230
    1744:	be 4f       	sbci	r27, 0xFE	; 254
    1746:	6d 91       	ld	r22, X+
    1748:	7c 91       	ld	r23, X
    174a:	11 97       	sbiw	r26, 0x01	; 1
    174c:	67 2b       	or	r22, r23
    174e:	59 f4       	brne	.+22     	; 0x1766 <dequeueRQ+0x50>
    1750:	56 97       	sbiw	r26, 0x16	; 22
    1752:	6c 91       	ld	r22, X
    1754:	61 30       	cpi	r22, 0x01	; 1
    1756:	39 f4       	brne	.+14     	; 0x1766 <dequeueRQ+0x50>
    1758:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    175a:	41 15       	cp	r20, r1
    175c:	51 05       	cpc	r21, r1
    175e:	49 f4       	brne	.+18     	; 0x1772 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	2d c0       	rjmp	.+90     	; 0x17c0 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	31 09       	sbc	r19, r1
    176a:	40 f7       	brcc	.-48     	; 0x173c <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	27 c0       	rjmp	.+78     	; 0x17c0 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1772:	68 81       	ld	r22, Y
    1774:	79 81       	ldd	r23, Y+1	; 0x01
    1776:	61 50       	subi	r22, 0x01	; 1
    1778:	71 09       	sbc	r23, r1
    177a:	26 17       	cp	r18, r22
    177c:	37 07       	cpc	r19, r23
    177e:	9c f4       	brge	.+38     	; 0x17a6 <dequeueRQ+0x90>
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	dc 01       	movw	r26, r24
    1786:	ae 0f       	add	r26, r30
    1788:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    178a:	12 96       	adiw	r26, 0x02	; 2
    178c:	8d 91       	ld	r24, X+
    178e:	9c 91       	ld	r25, X
    1790:	13 97       	sbiw	r26, 0x03	; 3
    1792:	8d 93       	st	X+, r24
    1794:	9d 93       	st	X+, r25
            i++;
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    179a:	e8 81       	ld	r30, Y
    179c:	f9 81       	ldd	r31, Y+1	; 0x01
    179e:	31 97       	sbiw	r30, 0x01	; 1
    17a0:	2e 17       	cp	r18, r30
    17a2:	3f 07       	cpc	r19, r31
    17a4:	94 f3       	brlt	.-28     	; 0x178a <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    17a6:	88 81       	ld	r24, Y
    17a8:	99 81       	ldd	r25, Y+1	; 0x01
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	99 83       	std	Y+1, r25	; 0x01
    17ae:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    17b0:	84 2f       	mov	r24, r20
    17b2:	95 2f       	mov	r25, r21
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    17c6:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    17c8:	2d 91       	ld	r18, X+
    17ca:	3c 91       	ld	r19, X
    17cc:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    17ce:	23 2b       	or	r18, r19
    17d0:	a9 f0       	breq	.+42     	; 0x17fc <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    17d2:	2d 91       	ld	r18, X+
    17d4:	3c 91       	ld	r19, X
    17d6:	11 97       	sbiw	r26, 0x01	; 1
    17d8:	f9 01       	movw	r30, r18
    17da:	e1 50       	subi	r30, 0x01	; 1
    17dc:	f0 48       	sbci	r31, 0x80	; 128
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	e8 0f       	add	r30, r24
    17e4:	f9 1f       	adc	r31, r25
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    17ea:	2d 91       	ld	r18, X+
    17ec:	3c 91       	ld	r19, X
    17ee:	11 97       	sbiw	r26, 0x01	; 1
    17f0:	21 50       	subi	r18, 0x01	; 1
    17f2:	31 09       	sbc	r19, r1
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	3c 93       	st	X, r19
    17f8:	2e 93       	st	-X, r18
    17fa:	08 95       	ret

    return result;
}
    17fc:	08 95       	ret

000017fe <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
    17fe:	3d 9a       	sbi	0x07, 5	; 7
    1800:	45 98       	cbi	0x08, 5	; 8
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	39 e6       	ldi	r19, 0x69	; 105
    1806:	88 e1       	ldi	r24, 0x18	; 24
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	30 40       	sbci	r19, 0x00	; 0
    180c:	80 40       	sbci	r24, 0x00	; 0
    180e:	e1 f7       	brne	.-8      	; 0x1808 <Roomba_Init+0xa>
    1810:	00 c0       	rjmp	.+0      	; 0x1812 <Roomba_Init+0x14>
    1812:	00 00       	nop
    1814:	45 9a       	sbi	0x08, 5	; 8
    1816:	9f ef       	ldi	r25, 0xFF	; 255
    1818:	27 ea       	ldi	r18, 0xA7	; 167
    181a:	31 e6       	ldi	r19, 0x61	; 97
    181c:	91 50       	subi	r25, 0x01	; 1
    181e:	20 40       	sbci	r18, 0x00	; 0
    1820:	30 40       	sbci	r19, 0x00	; 0
    1822:	e1 f7       	brne	.-8      	; 0x181c <Roomba_Init+0x1e>
    1824:	00 c0       	rjmp	.+0      	; 0x1826 <Roomba_Init+0x28>
    1826:	00 00       	nop
    1828:	83 e0       	ldi	r24, 0x03	; 3
    182a:	45 98       	cbi	0x08, 5	; 8
    182c:	9f ef       	ldi	r25, 0xFF	; 255
    182e:	20 e7       	ldi	r18, 0x70	; 112
    1830:	32 e0       	ldi	r19, 0x02	; 2
    1832:	91 50       	subi	r25, 0x01	; 1
    1834:	20 40       	sbci	r18, 0x00	; 0
    1836:	30 40       	sbci	r19, 0x00	; 0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <Roomba_Init+0x34>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <Roomba_Init+0x3e>
    183c:	00 00       	nop
    183e:	45 9a       	sbi	0x08, 5	; 8
    1840:	9f ef       	ldi	r25, 0xFF	; 255
    1842:	20 e7       	ldi	r18, 0x70	; 112
    1844:	32 e0       	ldi	r19, 0x02	; 2
    1846:	91 50       	subi	r25, 0x01	; 1
    1848:	20 40       	sbci	r18, 0x00	; 0
    184a:	30 40       	sbci	r19, 0x00	; 0
    184c:	e1 f7       	brne	.-8      	; 0x1846 <Roomba_Init+0x48>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <Roomba_Init+0x52>
    1850:	00 00       	nop
    1852:	81 50       	subi	r24, 0x01	; 1
    1854:	51 f7       	brne	.-44     	; 0x182a <Roomba_Init+0x2c>
    1856:	a6 d0       	rcall	.+332    	; 0x19a4 <uart0_init>
    1858:	80 e8       	ldi	r24, 0x80	; 128
    185a:	d1 d0       	rcall	.+418    	; 0x19fe <uart0_putc>
    185c:	8f ef       	ldi	r24, 0xFF	; 255
    185e:	99 ef       	ldi	r25, 0xF9	; 249
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	81 50       	subi	r24, 0x01	; 1
    1864:	90 40       	sbci	r25, 0x00	; 0
    1866:	20 40       	sbci	r18, 0x00	; 0
    1868:	e1 f7       	brne	.-8      	; 0x1862 <Roomba_Init+0x64>
    186a:	00 c0       	rjmp	.+0      	; 0x186c <Roomba_Init+0x6e>
    186c:	00 00       	nop
    186e:	81 e8       	ldi	r24, 0x81	; 129
    1870:	c6 d0       	rcall	.+396    	; 0x19fe <uart0_putc>
    1872:	89 e0       	ldi	r24, 0x09	; 9
    1874:	c4 d0       	rcall	.+392    	; 0x19fe <uart0_putc>
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	81 ee       	ldi	r24, 0xE1	; 225
    187a:	94 e0       	ldi	r25, 0x04	; 4
    187c:	31 50       	subi	r19, 0x01	; 1
    187e:	80 40       	sbci	r24, 0x00	; 0
    1880:	90 40       	sbci	r25, 0x00	; 0
    1882:	e1 f7       	brne	.-8      	; 0x187c <Roomba_Init+0x7e>
    1884:	00 c0       	rjmp	.+0      	; 0x1886 <Roomba_Init+0x88>
    1886:	00 00       	nop
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	8c d0       	rcall	.+280    	; 0x19a4 <uart0_init>
    188c:	82 e8       	ldi	r24, 0x82	; 130
    188e:	b7 d0       	rcall	.+366    	; 0x19fe <uart0_putc>
    1890:	2f ef       	ldi	r18, 0xFF	; 255
    1892:	39 ef       	ldi	r19, 0xF9	; 249
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	21 50       	subi	r18, 0x01	; 1
    1898:	30 40       	sbci	r19, 0x00	; 0
    189a:	80 40       	sbci	r24, 0x00	; 0
    189c:	e1 f7       	brne	.-8      	; 0x1896 <Roomba_Init+0x98>
    189e:	00 c0       	rjmp	.+0      	; 0x18a0 <Roomba_Init+0xa2>
    18a0:	00 00       	nop
    18a2:	08 95       	ret

000018a4 <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	18 2f       	mov	r17, r24
    18ae:	09 2f       	mov	r16, r25
    18b0:	c6 2f       	mov	r28, r22
    18b2:	d7 2f       	mov	r29, r23
	uart_putc(DRIVE);
    18b4:	89 e8       	ldi	r24, 0x89	; 137
    18b6:	a3 d0       	rcall	.+326    	; 0x19fe <uart0_putc>
	uart_putc(HIGH_BYTE(velocity));
    18b8:	80 2f       	mov	r24, r16
    18ba:	a1 d0       	rcall	.+322    	; 0x19fe <uart0_putc>
	uart_putc(LOW_BYTE(velocity));
    18bc:	81 2f       	mov	r24, r17
    18be:	9f d0       	rcall	.+318    	; 0x19fe <uart0_putc>
	uart_putc(HIGH_BYTE(radius));
    18c0:	8d 2f       	mov	r24, r29
    18c2:	9d d0       	rcall	.+314    	; 0x19fe <uart0_putc>
	uart_putc(LOW_BYTE(radius));
    18c4:	8c 2f       	mov	r24, r28
    18c6:	9b d0       	rcall	.+310    	; 0x19fe <uart0_putc>
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	08 95       	ret

000018d2 <__vector_25>:
Input:    None
Returns:  None
**************************************************************************/
void uart0_flush(void)
{
	UART_RxHead = UART_RxTail;
    18d2:	1f 92       	push	r1
    18d4:	0f 92       	push	r0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	0b b6       	in	r0, 0x3b	; 59
    18de:	0f 92       	push	r0
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
    18f0:	20 91 c0 00 	lds	r18, 0x00C0
    18f4:	30 91 c6 00 	lds	r19, 0x00C6
    18f8:	28 71       	andi	r18, 0x18	; 24
    18fa:	80 91 5b 15 	lds	r24, 0x155B
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	8f 77       	andi	r24, 0x7F	; 127
    1904:	99 27       	eor	r25, r25
    1906:	40 91 5a 15 	lds	r20, 0x155A
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	48 17       	cp	r20, r24
    190e:	59 07       	cpc	r21, r25
    1910:	39 f0       	breq	.+14     	; 0x1920 <__vector_25+0x4e>
    1912:	80 93 5b 15 	sts	0x155B, r24
    1916:	fc 01       	movw	r30, r24
    1918:	e2 5a       	subi	r30, 0xA2	; 162
    191a:	fa 4e       	sbci	r31, 0xEA	; 234
    191c:	30 83       	st	Z, r19
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <__vector_25+0x50>
    1920:	22 e0       	ldi	r18, 0x02	; 2
    1922:	20 93 59 15 	sts	0x1559, r18
    1926:	ff 91       	pop	r31
    1928:	ef 91       	pop	r30
    192a:	9f 91       	pop	r25
    192c:	8f 91       	pop	r24
    192e:	5f 91       	pop	r21
    1930:	4f 91       	pop	r20
    1932:	3f 91       	pop	r19
    1934:	2f 91       	pop	r18
    1936:	0f 90       	pop	r0
    1938:	0b be       	out	0x3b, r0	; 59
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0
    1940:	1f 90       	pop	r1
    1942:	18 95       	reti

00001944 <__vector_26>:
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	0b b6       	in	r0, 0x3b	; 59
    1950:	0f 92       	push	r0
    1952:	8f 93       	push	r24
    1954:	9f 93       	push	r25
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
    195a:	90 91 5d 15 	lds	r25, 0x155D
    195e:	80 91 5c 15 	lds	r24, 0x155C
    1962:	98 17       	cp	r25, r24
    1964:	79 f0       	breq	.+30     	; 0x1984 <__vector_26+0x40>
    1966:	80 91 5c 15 	lds	r24, 0x155C
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	8f 77       	andi	r24, 0x7F	; 127
    1970:	99 27       	eor	r25, r25
    1972:	80 93 5c 15 	sts	0x155C, r24
    1976:	fc 01       	movw	r30, r24
    1978:	e2 52       	subi	r30, 0x22	; 34
    197a:	fa 4e       	sbci	r31, 0xEA	; 234
    197c:	80 81       	ld	r24, Z
    197e:	80 93 c6 00 	sts	0x00C6, r24
    1982:	05 c0       	rjmp	.+10     	; 0x198e <__vector_26+0x4a>
    1984:	e1 ec       	ldi	r30, 0xC1	; 193
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8f 7d       	andi	r24, 0xDF	; 223
    198c:	80 83       	st	Z, r24
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	0f 90       	pop	r0
    1998:	0b be       	out	0x3b, r0	; 59
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	0f 90       	pop	r0
    19a0:	1f 90       	pop	r1
    19a2:	18 95       	reti

000019a4 <uart0_init>:
    19a4:	10 92 5d 15 	sts	0x155D, r1
    19a8:	10 92 5c 15 	sts	0x155C, r1
    19ac:	10 92 5b 15 	sts	0x155B, r1
    19b0:	10 92 5a 15 	sts	0x155A, r1
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	41 f0       	breq	.+16     	; 0x19c8 <uart0_init+0x24>
    19b8:	18 f0       	brcs	.+6      	; 0x19c0 <uart0_init+0x1c>
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	49 f0       	breq	.+18     	; 0x19d0 <uart0_init+0x2c>
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <uart0_init+0x34>
    19c0:	87 e6       	ldi	r24, 0x67	; 103
    19c2:	80 93 c4 00 	sts	0x00C4, r24
    19c6:	0b c0       	rjmp	.+22     	; 0x19de <uart0_init+0x3a>
    19c8:	83 e3       	ldi	r24, 0x33	; 51
    19ca:	80 93 c4 00 	sts	0x00C4, r24
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <uart0_init+0x3a>
    19d0:	82 e2       	ldi	r24, 0x22	; 34
    19d2:	80 93 c4 00 	sts	0x00C4, r24
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <uart0_init+0x3a>
    19d8:	87 e6       	ldi	r24, 0x67	; 103
    19da:	80 93 c4 00 	sts	0x00C4, r24
    19de:	80 91 c5 00 	lds	r24, 0x00C5
    19e2:	80 91 c4 00 	lds	r24, 0x00C4
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	80 93 c5 00 	sts	0x00C5, r24
    19ec:	10 92 c4 00 	sts	0x00C4, r1
    19f0:	88 e9       	ldi	r24, 0x98	; 152
    19f2:	80 93 c1 00 	sts	0x00C1, r24
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	80 93 c2 00 	sts	0x00C2, r24
    19fc:	08 95       	ret

000019fe <uart0_putc>:
    19fe:	40 91 5d 15 	lds	r20, 0x155D
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	4f 5f       	subi	r20, 0xFF	; 255
    1a06:	5f 4f       	sbci	r21, 0xFF	; 255
    1a08:	4f 77       	andi	r20, 0x7F	; 127
    1a0a:	55 27       	eor	r21, r21
    1a0c:	20 91 5c 15 	lds	r18, 0x155C
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	24 17       	cp	r18, r20
    1a14:	35 07       	cpc	r19, r21
    1a16:	d1 f3       	breq	.-12     	; 0x1a0c <uart0_putc+0xe>
    1a18:	fa 01       	movw	r30, r20
    1a1a:	e2 52       	subi	r30, 0x22	; 34
    1a1c:	fa 4e       	sbci	r31, 0xEA	; 234
    1a1e:	80 83       	st	Z, r24
    1a20:	40 93 5d 15 	sts	0x155D, r20
    1a24:	e1 ec       	ldi	r30, 0xC1	; 193
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 62       	ori	r24, 0x20	; 32
    1a2c:	80 83       	st	Z, r24
    1a2e:	08 95       	ret

00001a30 <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    1a30:	1f 92       	push	r1
    1a32:	0f 92       	push	r0
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	0f 92       	push	r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	0b b6       	in	r0, 0x3b	; 59
    1a3c:	0f 92       	push	r0
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	ef 93       	push	r30
    1a4c:	ff 93       	push	r31
	uint8_t data;
	uint8_t usr;
	uint8_t lastRxError;

	/* read UART status register and UART data register */
	usr  = UART1_STATUS;
    1a4e:	20 91 c8 00 	lds	r18, 0x00C8
	data = UART1_DATA;
    1a52:	30 91 ce 00 	lds	r19, 0x00CE

	/* */
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
    1a56:	28 71       	andi	r18, 0x18	; 24

	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;
    1a58:	80 91 56 14 	lds	r24, 0x1456
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	8f 77       	andi	r24, 0x7F	; 127
    1a62:	99 27       	eor	r25, r25

	if ( tmphead == UART1_RxTail ) {
    1a64:	40 91 55 14 	lds	r20, 0x1455
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	48 17       	cp	r20, r24
    1a6c:	59 07       	cpc	r21, r25
    1a6e:	39 f0       	breq	.+14     	; 0x1a7e <__vector_36+0x4e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	} else {
		/* store new index */
		UART1_RxHead = tmphead;
    1a70:	80 93 56 14 	sts	0x1456, r24
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
    1a74:	fc 01       	movw	r30, r24
    1a76:	e7 5a       	subi	r30, 0xA7	; 167
    1a78:	fb 4e       	sbci	r31, 0xEB	; 235
    1a7a:	30 83       	st	Z, r19
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <__vector_36+0x50>
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;

	if ( tmphead == UART1_RxTail ) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1a7e:	22 e0       	ldi	r18, 0x02	; 2
		/* store new index */
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}
	UART1_LastRxError = lastRxError;
    1a80:	20 93 54 14 	sts	0x1454, r18
}
    1a84:	ff 91       	pop	r31
    1a86:	ef 91       	pop	r30
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	5f 91       	pop	r21
    1a8e:	4f 91       	pop	r20
    1a90:	3f 91       	pop	r19
    1a92:	2f 91       	pop	r18
    1a94:	0f 90       	pop	r0
    1a96:	0b be       	out	0x3b, r0	; 59
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	0f 90       	pop	r0
    1a9e:	1f 90       	pop	r1
    1aa0:	18 95       	reti

00001aa2 <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1aa2:	1f 92       	push	r1
    1aa4:	0f 92       	push	r0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	0f 92       	push	r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	0b b6       	in	r0, 0x3b	; 59
    1aae:	0f 92       	push	r0
    1ab0:	8f 93       	push	r24
    1ab2:	9f 93       	push	r25
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
	uint16_t tmptail;

	if ( UART1_TxHead != UART1_TxTail) {
    1ab8:	90 91 58 14 	lds	r25, 0x1458
    1abc:	80 91 57 14 	lds	r24, 0x1457
    1ac0:	98 17       	cp	r25, r24
    1ac2:	79 f0       	breq	.+30     	; 0x1ae2 <__vector_37+0x40>
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART_TX1_BUFFER_MASK;
    1ac4:	80 91 57 14 	lds	r24, 0x1457
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	8f 77       	andi	r24, 0x7F	; 127
    1ace:	99 27       	eor	r25, r25
		UART1_TxTail = tmptail;
    1ad0:	80 93 57 14 	sts	0x1457, r24
		/* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	e7 52       	subi	r30, 0x27	; 39
    1ad8:	fb 4e       	sbci	r31, 0xEB	; 235
    1ada:	80 81       	ld	r24, Z
    1adc:	80 93 ce 00 	sts	0x00CE, r24
    1ae0:	05 c0       	rjmp	.+10     	; 0x1aec <__vector_37+0x4a>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1ae2:	e9 ec       	ldi	r30, 0xC9	; 201
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8f 7d       	andi	r24, 0xDF	; 223
    1aea:	80 83       	st	Z, r24
	}
}
    1aec:	ff 91       	pop	r31
    1aee:	ef 91       	pop	r30
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	0f 90       	pop	r0
    1af6:	0b be       	out	0x3b, r0	; 59
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	0f 90       	pop	r0
    1afe:	1f 90       	pop	r1
    1b00:	18 95       	reti

00001b02 <__udivmodhi4>:
    1b02:	aa 1b       	sub	r26, r26
    1b04:	bb 1b       	sub	r27, r27
    1b06:	51 e1       	ldi	r21, 0x11	; 17
    1b08:	07 c0       	rjmp	.+14     	; 0x1b18 <__udivmodhi4_ep>

00001b0a <__udivmodhi4_loop>:
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	a6 17       	cp	r26, r22
    1b10:	b7 07       	cpc	r27, r23
    1b12:	10 f0       	brcs	.+4      	; 0x1b18 <__udivmodhi4_ep>
    1b14:	a6 1b       	sub	r26, r22
    1b16:	b7 0b       	sbc	r27, r23

00001b18 <__udivmodhi4_ep>:
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	5a 95       	dec	r21
    1b1e:	a9 f7       	brne	.-22     	; 0x1b0a <__udivmodhi4_loop>
    1b20:	80 95       	com	r24
    1b22:	90 95       	com	r25
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	08 95       	ret

00001b2a <__tablejump2__>:
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	88 1f       	adc	r24, r24
    1b30:	8b bf       	out	0x3b, r24	; 59
    1b32:	07 90       	elpm	r0, Z+
    1b34:	f6 91       	elpm	r31, Z
    1b36:	e0 2d       	mov	r30, r0
    1b38:	19 94       	eijmp

00001b3a <_exit>:
    1b3a:	f8 94       	cli

00001b3c <__stop_program>:
    1b3c:	ff cf       	rjmp	.-2      	; 0x1b3c <__stop_program>
